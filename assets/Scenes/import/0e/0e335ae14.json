[1,["20g1ukYUVPvKWKBRznAKo+@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","11vcSwZKhOt6Knn7niM+l3@f9941","f6SJZOjTJB/JrJeh5xTdF7","9a85p0UpNB1bvtFLkg01rU","57UgcWSMhKGYrPQcn4d3+w@f9941","15jn5SMiBM15aUcT4OboJ4@f9941","bfQHjW0tdAc4O7zW8YAuiA","a3zQCfCrBCDZJ4uf2rk5u8","58MUW2sKlM6J8B0D2xC8tq@6274a","f77CJU5lxEmpN7HRnd15Ff@73b7f","14e7E/sgFJuJpjfcZ/2I7F","f1KiPEuSRDIqJgPZgkKPHo@f9941","d3x4IMKphEKYvHuEU7yaxB","12Y9dMgWdJKJGmTiZyQR9H@a804a","8824mlZlVBa5/zKLhp5o3A@fcd63","12Y9dMgWdJKJGmTiZyQR9H@2e76e","1brw/JvvpFnIvdrxpFCgMZ","f77CJU5lxEmpN7HRnd15Ff@4fe00","f77CJU5lxEmpN7HRnd15Ff@438fe","e2JMyDbJFLHJ9NhM63Y1a4@6274a","11vcSwZKhOt6Knn7niM+l3@6c48a","35PwLo/9VNcpu0cygMe7jI@6c48a","15jn5SMiBM15aUcT4OboJ4@6c48a","20g1ukYUVPvKWKBRznAKo+@6c48a","bdG8q6vX1KcbFDmXyII4Pk@f9941","29QJ2qLZNKCZwNKxMJXsE1@6274a","29QJ2qLZNKCZwNKxMJXsE1@136f9","29QJ2qLZNKCZwNKxMJXsE1@7d6ab","54TknWPwVPqJqeCR+Y/Czo@6c48a","57UgcWSMhKGYrPQcn4d3+w@6c48a","58MUW2sKlM6J8B0D2xC8tq@9dee3","58MUW2sKlM6J8B0D2xC8tq@c51ba","58MUW2sKlM6J8B0D2xC8tq@28f85","58MUW2sKlM6J8B0D2xC8tq@7d6ab","311lr5R1RFY4G3Cfh3My/s@6c48a","f4VWK2jMdOUZqfohG9mNaN@6c48a","50vpuN4mRBbLazL0pXnOUr","bd/yCK4WpJ2ozchThYd8ap","22uUNQmFtPDZ4lytAkIDSv","4ck0ti0ARBvLOMtAyw+mua","a5KCy4j1FArp8MRGBZ+DAV@6f3b0","e9CEStiqtKu5NmX8lO5q9F","e2JMyDbJFLHJ9NhM63Y1a4@e9f31","adFhiW4qlEcalYBuJD3RDE@646a4","29QJ2qLZNKCZwNKxMJXsE1@0a984","a2yjSjXFhEoJ/ZqywimCOb@19bd7","5exSsNeaZJB7qxK9deyz66","963VCitINJ1ZdTtX5AjVFE","58MUW2sKlM6J8B0D2xC8tq@398c5","5apxLDoIZN7oXDj5VW03Le","757QdSvjBNZLsQsUQoE+Q7","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","47sWy3DWhC4qeIKYs1UB2r@6c48a","8824mlZlVBa5/zKLhp5o3A@a96a6","8824mlZlVBa5/zKLhp5o3A@9d093","8824mlZlVBa5/zKLhp5o3A@61144","95EkngnxZFbYuFpsqVTaFr@6c48a","74JWWLlP5NiabxV2tMER2S@6c48a","1fnEfljbBHV5dd1mYtVX3K@6c48a","a2yjSjXFhEoJ/ZqywimCOb@6274a","a2yjSjXFhEoJ/ZqywimCOb@c23f6","a2yjSjXFhEoJ/ZqywimCOb@7d6ab","a5KCy4j1FArp8MRGBZ+DAV@f8008","a5KCy4j1FArp8MRGBZ+DAV@44ca0","a5KCy4j1FArp8MRGBZ+DAV@84b07","adFhiW4qlEcalYBuJD3RDE@7d6ab","adFhiW4qlEcalYBuJD3RDE@6274a","adFhiW4qlEcalYBuJD3RDE@ec6d1","03wgturGhHu71EdV0TziEP@73b7f","6bXn3PvrdPEK9YaBf9kRLS@73b7f","d8mmC5LmtDrLSqhFzu4+xk@73b7f","bdG8q6vX1KcbFDmXyII4Pk@6c48a","f77CJU5lxEmpN7HRnd15Ff@f4901","daC5tKOo1CNJ03rp7DVnX1","1ee1/o3RdMCbQppKS7XlTD","70uMu3MjJDBKYn23oQlNPf","baIUdvKGZPgZxNbjWTFuRI","b2CKnuGVxDY69X+JDvw+y/","bbHGkWjuZCNpevGHUmg4WQ@6c48a","e2JMyDbJFLHJ9NhM63Y1a4@7d6ab","e2JMyDbJFLHJ9NhM63Y1a4@f6aef","e2JMyDbJFLHJ9NhM63Y1a4@9570f","6fI2GuXOBOXYlYPAMUJPJO@6c48a","f1KiPEuSRDIqJgPZgkKPHo@6c48a","f77CJU5lxEmpN7HRnd15Ff@3efb2","f77CJU5lxEmpN7HRnd15Ff@cd839"],["node","_spriteFrame","_parent","root","targetInfo","_effectAsset","mainTexture","_normalSprite","_mesh","value","_hoverSprite","_pressedSprite","_disabledSprite","_target","data","asset","_textureSource","to","from","target","clip","source","_checkMark","_backgroundImage","_skeleton","_musicToggle","_soundToggle","_switchScenePerformanceGo","_exitBtn","_closeBtn","_wndGo","_cameraComponent","_editBoxY","_editBoxX","_cam","_levelIndexLabel","_wnd","_useTimeLabel","_nextLevelMapSizeLabel","_nextLevelBtn","_timeLabel","_dateLabel","scene","_defaultBgm","_myFishPrefab","_envmapHDR","_envmapLDR","_anyState","_exitState","_entryState","prefabRootNode","_fish","_shadowAc","_skinRenderer","_ac","_material","graph","_defaultClip"],[["cc.Node",["_name","_layer","_active","_objFlags","_id","__editorExtras__","_components","_parent","_prefab","_children","_lpos","_lrot","_euler","_lscale"],-3,9,1,4,2,5,5,5,5],["cc.Widget",["_alignFlags","_top","_originalWidth","_left","_bottom","_originalHeight","_isAbsTop","_right","_isAbsLeft","_isAbsVerticalCenter","_isAbsBottom","_verticalCenter","_isAbsRight","_horizontalCenter","_isAbsHorizontalCenter","node","__prefab"],-12,1,4],["cc.Label",["_actualFontSize","_string","_fontSize","_lineHeight","_enableWrapText","_overflow","_horizontalAlign","node","_color","__prefab"],-4,1,5,4],["cc.Node",["_name","_layer","_id","_active","_objFlags","_components","_parent","_children","_lpos","_prefab","_lrot","_euler","__editorExtras__"],-2,12,1,2,5,4,5,5,11],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame","__prefab","_color"],1,1,6,4,5],"cc.SpriteFrame",["cc.UITransform",["node","_contentSize","__prefab","_anchorPoint"],3,1,5,4,5],["cc.Button",["_transition","node","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","__prefab","clickEvents"],2,1,5,1,6,6,6,6,4,9],["cc.Node",["_name","_id","_parent","_children","_components","_lpos","_prefab","_lrot","_euler"],1,1,12,2,5,4,5,5],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides","mountedChildren","mountedComponents"],1,9,9,9],["MapSizeTransformData",["_pos","_rotation","_scale","_size"],3,5,5,5,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.animation.BindableNumber",["variable","value"],1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler"],2,1,9,4,5,5,5],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["cc.Toggle",["node","__prefab","_normalColor","_target","_checkMark","_normalSprite"],3,1,4,5,1,1,6],["cc.MeshRenderer",["_name","node","_materials","lightmapSettings","_mesh","__prefab"],2,1,3,4,6,4],["ac83bkhEr5IFYux+rjOxgvH",["node","__prefab"],3,1,4],["cc.Camera",["_clearFlags","_visibility","_projection","_priority","_orthoHeight","_far","node","_color"],-3,1,5],["cc.animation.AnimationTransition",["exitConditionEnabled","from","to","conditions"],2,1,1,9],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.Material",["_name","_states","_defines","_props"],0,12],["cc.Material",["_name","_props","_defines"],0],["cc.AudioClip",["_name","_native","_duration"],0],["cc.Node",["_name","_parent","_children","_components","_prefab","_lpos","_lrot","_euler"],2,1,2,2,4,5,5,5],["cc.CompPrefabInfo",["fileId"],2],["fbeafSheD1I9YnUK0AESgEr",["node","__prefab","_wndGo","_closeBtn","_exitBtn","_switchScenePerformanceGo","_soundToggle","_musicToggle"],3,1,4,1,1,1,1,1,1],["cc.PrefabInfo",["fileId","root","instance","asset"],2,1,4,6],["cc.Layout",["_resizeMode","_layoutType","_isAlign","node","__prefab"],0,1,4],["cc.ModelLightmapSettings",[],3],["cc.SubContextView",["node","__prefab"],3,1,4],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.SceneAsset",["_name"],2],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.PrefabInstance",["fileId","prefabRootNode","mountedComponents","propertyOverrides","removedComponents"],2,1,9,9,9],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["cc.TargetInfo",["localID"],2],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,2],["d596eTq+v5DJ5c4ef7jo9HQ",["node","_defaultTransformData","_transformData"],3,1,4,9],["d596eTq+v5DJ5c4ef7jo9HQ",["_defaultTransformData","node","_transformData"],2,1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_enabled","_type","_shadowColor"],1,5],["cc.SkyboxInfo",["_enabled","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["7aff0vIc1VMWpV31YRKuvcM",["node","_editBoxX","_editBoxY"],3,1,1,1],["83e92SgYMxMxoy5ZSyzEDX8",["node","_data"],3,1,12],["081f4vBtXVEgpn8VG2jEJsI",["_mapSizeX","_mapSizeY","_mapElementSize","node"],0,1],["0e635cFw5JOq55YwCuPCtqk",["node","_myFishPrefab"],3,1,6],["742afIBq/ZNo7glNtjbTUz3",["node","_cam"],3,1,1],["c6989VugppKeIlUnCwR0t0a",["node","_wnd","_levelIndexLabel","_switchScenePerformanceGo"],3,1,1,1,1],["128acmo2cBFT7nIJWadVDy/",["node","_wnd","_nextLevelBtn","_nextLevelMapSizeLabel","_useTimeLabel"],3,1,1,1,1,1],["602d8347FZGCKc5SMFprkAg",["node","_timeLabel"],3,1,1],["21793HRG5RE2ri0o92+UYXF",["node","_dateLabel"],3,1,1],["cc.RichText",["_string","node"],2,1],["229e5tHUkFDt5xlouC6BLkl",["node","_defaultBgm"],3,1,6],["cc.DirectionalLight",["_colorTemperature","_shadowEnabled","_shadowPcf","_shadowBias","_shadowSaturation","_shadowDistance","node","_staticSettings"],-3,1,4],["cc.StaticLightSettings",[],3],["cc.EditBox",["_inputMode","_maxLength","node","_textLabel","_placeholderLabel"],1,1,1,1],["cc.animation.AnimationGraph",["_layers","_variables"],3,9,11],["cc.animation.Layer",["_stateMachine"],3,4],["cc.animation.StateMachine",["_states","_transitions","_entryState","_exitState","_anyState"],3,2,9,1,1,1],["cc.animation.Transition",["from","to"],3,1,1],["cc.animation.BinaryCondition",["lhs","rhs"],3,4,4],["cc.animation.PlainVariable",["_type"],2],["cc.animation.Motion",["name","motion"],2,4],["cc.animation.ClipMotion",["clip"],3,6],["cc.animation.State",["name"],2],["00c26tkJxxJWa830jKiSBWP",["node","__prefab","_fish"],3,1,4,1],["cc.BoxCollider",["node","__prefab","_size","_material"],3,1,4,5,6],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo"],2,1,1,4],["40006aUPbVJsbybdoemAh+E",["__prefab","_mats","_turnOverAudioClips"],3,4,3,3],["cc.animation.AnimationController",["node","__prefab"],3,1,4],["cc.SkinnedMeshRenderer",["_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot"],2,4,4,3,4,1],["cc.SkinnedMeshRenderer",["node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],3,1,4,3,4,1,6,6],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12],["cc.SkeletalAnimation",["node","__prefab","_clips","_defaultClip"],3,1,4,3,6]],[[26,0,2],[11,0,1,2,2],[37,0,2],[6,0,1,1],[6,0,2,1,1],[45,0,1,2,2],[43,0,1,2,2],[6,0,2,1],[0,0,1,7,9,6,8,10,3],[22,0,1,2,3,4],[30,1],[0,0,1,7,6,8,3],[21,0,1,2,3],[0,0,1,7,9,6,10,3],[6,0,1],[10,3,0,1,2,1],[46,0,1,2,3],[28,0,1,2,3,2],[4,1,0,2,3,3],[42,0,1,2,3],[44,0,1,2,2],[17,1,5,2,3,4,1],[4,0,2,4,3,2],[10,3,0,1,1],[13,1],[1,0,2,5,15,4],[0,0,9,8,2],[0,3,5,7,8,3],[32,0,1,2,3],[0,0,1,7,6,3],[7,0,1,9,2,3,4,5,6,7,2],[0,0,1,7,9,6,8,3],[0,0,3,1,7,6,4],[0,0,7,8,10,11,12,2],[3,0,1,6,5,8,3],[1,0,2,5,15,16,4],[2,1,0,2,3,7,9,8,5],[9,0,2,2],[0,0,1,9,6,8,3],[0,0,7,6,8,2],[0,0,1,9,6,3],[0,0,1,7,9,6,3],[3,0,1,7,5,9,3],[3,0,1,6,5,9,3],[6,0,1,3,1],[2,1,0,2,3,7,5],[2,1,0,2,5,4,7,8,6],[2,1,0,2,3,4,7,8,6],[2,1,0,2,3,5,4,7,8,7],[17,0,1,2,3,4,2],[18,0,1],[20,0,1,2,3,2],[74,0,1,1],[12,0,2],[76,0,1,2],[77,0,1],[24,0,1,2,4],[13,0,2],[0,0,7,6,8,10,2],[0,0,3,1,7,6,10,4],[4,0,2,4,5,3,2],[4,0,2,4,2],[15,0,1,1],[9,0,1,2,3],[78,0,2],[81,0,1,2,3,2],[0,0,3,1,7,6,8,4],[0,0,7,9,6,8,2],[0,3,5,8,3],[0,0,2,1,9,6,4],[0,0,4,7,6,3],[0,0,7,2],[0,0,7,6,8,11,12,2],[3,0,3,1,6,5,8,4],[3,0,1,6,5,3],[3,4,6,9,12,2],[1,0,1,4,10,5,15,16,6],[1,15,1],[1,0,3,7,1,4,11,8,9,2,5,15,11],[4,1,0,2,4,5,3,3],[4,1,0,2,4,3,3],[4,0,2,5,3,2],[4,0,2,3,2],[16,0,1,2,3,4,5,1],[16,0,1,2,3,4,1],[2,1,0,2,3,7,9,5],[7,0,1,8,2,3,2],[7,0,1,2,3,4,5,6,7,2],[36,0,1,1],[40,0,1,2,1],[69,0,1,2,3,4,3],[20,1,2,1],[12,1,2],[12,1],[86,0,1,2,4],[23,0,1,2,4],[0,0,2,1,7,9,6,8,4],[0,0,3,1,7,6,8,10,4],[0,0,2,1,9,6,8,4],[0,0,1,4,9,6,10,4],[0,0,2,1,7,9,6,10,4],[0,0,4,7,9,3],[0,0,2,1,7,9,6,4],[0,0,2,7,10,3],[0,0,1,9,6,10,3],[0,0,1,7,6,10,3],[0,0,7,6,10,11,13,12,2],[0,0,4,7,6,10,11,12,3],[0,0,2,7,6,3],[0,0,2,7,6,10,3],[0,0,7,6,10,13,2],[0,0,9,6,8,10,2],[0,0,9,6,8,2],[0,0,7,8,10,2],[0,0,7,9,8,10,11,12,2],[0,0,7,9,8,10,2],[3,0,1,7,5,3],[3,0,1,6,7,5,3],[3,0,1,6,7,5,8,3],[3,0,2,6,5,8,10,11,3],[8,0,1,2,3,3],[8,0,2,4,5,2],[8,0,2,4,6,2],[8,0,3,6,5,7,8,2],[25,0,1,2,3,4,5,6,7,2],[14,0,1,2,3,4,5,6,2],[14,0,1,2,3,4,2],[1,15,16,1],[1,0,11,9,15,16,4],[1,0,1,6,9,15,16,5],[1,0,3,7,1,8,12,6,15,16,8],[1,0,3,7,1,2,15,16,6],[1,0,3,1,4,15,5],[1,0,3,7,1,4,11,9,2,5,15,10],[1,0,7,1,4,11,8,9,2,5,15,10],[1,0,3,4,8,10,15,6],[1,0,4,10,2,15,5],[1,0,13,14,15,4],[1,0,1,6,15,4],[1,0,6,15,3],[1,0,1,6,2,15,5],[1,0,1,6,9,15,5],[1,0,3,7,8,12,2,15,7],[1,0,1,4,6,10,5,15,7],[1,0,7,4,12,10,5,15,7],[1,0,3,1,8,6,15,6],[1,0,3,8,15,4],[1,0,7,12,15,4],[27,0,1,2,3,4,5,6,7,1],[11,0,3,2],[11,0,1,2,4,3,2],[4,0,2,4,5,2],[29,0,1,2,3,4,4],[15,0,1],[2,1,0,2,3,4,7,9,6],[2,1,0,3,4,7,9,8,5],[2,1,0,2,5,4,7,9,8,6],[2,1,0,2,4,7,8,5],[2,1,0,3,5,4,7,8,6],[2,1,6,0,2,3,7,6],[2,0,2,3,7,8,4],[2,1,0,7,8,3],[7,0,1,8,9,2,3,4,5,6,7,2],[7,0,1,2,3,2],[31,0,1,1],[18,0,1,1],[33,0,2],[34,0,1,1],[9,0,1,3,4,2,3],[9,0,1,3,2,3],[35,0,1,2,3,4,2],[38,0,1,1],[39,0,1,1],[41,0,1,2,2],[10,0,1,2,1],[10,0,1,1],[47,0,1,2,2],[48,0,1,2,2],[49,0,1,2,3,2],[50,0,1,2,3,4,1],[51,0,1,2,3,4,2],[52,0,1,2,3],[53,0,1,2,2],[54,1],[55,1],[56,0,1,2,1],[57,0,1,1],[58,0,1,2,3,4],[59,0,1,1],[60,0,1,1],[61,0,1,2,3,1],[62,0,1,2,3,4,1],[63,0,1,1],[64,0,1,1],[65,0,1,2],[66,0,1,1],[67,0,1,2,3,4,5,6,7,7],[68,1],[19,0,1,6,3],[19,2,3,4,5,0,1,6,7,7],[70,0,1,1],[71,0,1],[72,0,1,2,3,4,1],[73,0,1,1],[75,0,2],[79,0,1,2,1],[80,0,1,2,3,1],[82,0,1,2,1],[83,0,1,1],[84,0,1,2,3,4,5,2],[85,0,1,2,3,4,5,6,1],[87,0,1,2,3,4],[88,0,1,2,3,1]],[[[{"name":"default_toggle_normal","rect":{"x":0,"y":0,"width":28,"height":28},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-14,-14,0,14,-14,0,-14,14,0,14,14,0],"indexes":[0,1,2,2,1,3],"uv":[0,28,28,28,0,0,28,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-14,"y":-14,"z":0},"maxPos":{"x":14,"y":14,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[22]],[[[12,".bin",3219909449,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6776,"length":2400,"count":600,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6776,"count":121,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-5,0,-5],"maxPosition",8,[1,5,0,5]]],-1],0,0,[],[],[]],[[[12,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[9,"FishRight",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[23,9]],[[{"name":"default_toggle_checkmark","rect":{"x":4,"y":5,"width":20,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":28,"height":28},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-10,-9,0,10,-9,0,-10,9,0,10,9,0],"indexes":[0,1,2,2,1,3],"uv":[4,23,24,23,4,5,24,5],"nuv":[0.14285714285714285,0.17857142857142858,0.8571428571428571,0.17857142857142858,0.14285714285714285,0.8214285714285714,0.8571428571428571,0.8214285714285714],"minPos":{"x":-10,"y":-9,"z":0},"maxPos":{"x":10,"y":9,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[24]],[[[56,"fanshen1",".mp3",0.489333],-1],0,0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[25]],[[[57,"SettingWnd"],[38,"SettingWnd",33554432,[-11,-12],[[4,-2,[0,"5a7tV2Jb9NCqDk/TtMprKM"],[5,960,640]],[35,45,100,100,-3,[0,"7arCBXKEBKiZRz1B+lvFX/"]],[148,-10,[0,"6fgVOyPKpCOrWfH5Hop4iQ"],-9,-8,-7,-6,-5,-4]],[1,"66YzTeS3pDq4DOw6ljn69x",-1,0]],[38,"WndBg",33554432,[-16,-17,-18,-19,-20],[[4,-13,[0,"16Ahb2QSRNXIp9I6u07peL"],[5,500,700]],[60,0,-14,[0,"894MIURG9IuoEkzjPdd7vX"],[4,4293388263],14],[127,-15,[0,"8btD2+W69D7oIMK39YDXlu"]]],[1,"cdfxcopuxCX76Z7C9uqXAK",1,0]],[8,"Toggles",33554432,2,[-24,-25,-26,-27],[[4,-21,[0,"ddVZ24IFRBsopwot/9JGSf"],[5,100,400]],[152,1,2,true,-22,[0,"e10z/dbrNHEpjWDjT/leM/"]],[128,2,0.1,false,-23,[0,"72ruAKhkNFB7mmlLdiixzp"]]],[1,"b1o4b9oixA+5fbPBFZuKfu",1,0],[1,0,70,0]],[96,"SwichScenePerformance",false,33554432,1,[-31,-32],[[4,-28,[0,"84AFnT9AJARLhK89XSBv5w"],[5,960,640]],[35,45,100,100,-29,[0,"fbZZ7EM71G1JkrABjlgFtM"]],[62,-30,[0,"3a+YG4FJVLA7DX3+SFjG77"]]],[1,"a0MiYOIoJMY6znPHeEHEZ2",1,0]],[31,"WndGo",33554432,1,[-35,2],[[4,-33,[0,"3eOr9tpDNCzb7x5duhICfS"],[5,960,640]],[35,45,100,100,-34,[0,"a1guyIsGBKu7YLoa07PC/X"]]],[1,"83o+y9dgZJyb/LDxYaeeWs",1,0]],[42,"Button",33554432,[-39],[[[7,-36,[0,"cbGplKsYFBp5FkiIbrPiiJ"]],[79,1,0,-37,[0,"2bE/JdO65HTIqZJM8H+SDs"],[4,4278190080],2],-38],4,4,1],[1,"dbiA3bm95PMK1LmSgyxZ57",1,0]],[42,"Toggle",33554432,[-43],[[[4,-40,[0,"41fCmE1BlERKnZF/e1FYW0"],[5,100,50]],[22,0,-41,[0,"06rIp5CARIhofhmb/fWD67"],4],-42],4,4,1],[1,"2bC1R0uy1E4JYjKZ2TC7Bd",1,0]],[42,"Toggle",33554432,[-47],[[[4,-44,[0,"aciXganApFfJozxAgkRSuG"],[5,100,50]],[22,0,-45,[0,"58wjdKypBL65ua1ACr9QCs"],6],-46],4,4,1],[1,"69lNzT7pxG8bppsMcIBxVx",1,0]],[38,"Toggle",33554432,[-53],[[4,-48,[0,"50IkkcwUtF+rzgAuYaGF1t"],[5,100,50]],[22,0,-49,[0,"91uV4+eGRKfpBQOOUDFI7N"],8],[83,-52,[0,"9dzARn9uNFFbuZbpm+eBhi"],[4,4292269782],-51,-50,9]],[1,"56lvOEiHJBLYQkq9i9fGFN",1,0]],[38,"Toggle",33554432,[-59],[[4,-54,[0,"0f/J2XiYJOfoQEfSwVhqRI"],[5,100,50]],[22,0,-55,[0,"bd4bGzb09PWqBiVNA6olrB"],11],[83,-58,[0,"77lFQhNghJY7vs+S3+rh2Q"],[4,4292269782],-57,-56,12]],[1,"37hQXMX0RMDZH14rn2JK6u",1,0]],[42,"Button",33554432,[-63],[[[4,-60,[0,"0fT99H02hPp61PsP7x7tmQ"],[5,200,80]],[80,1,0,-61,[0,"88XNFn7ypOXaTEG+IWeHQy"],13],-62],4,4,1],[1,"90JASrqddDJJFDCD2JeIfO",1,0]],[11,"Bg",33554432,5,[[4,-64,[0,"0dSJI0LY1KM6u39pRgYi1p"],[5,960,640]],[60,0,-65,[0,"9bToZvndFBk6fi8gAQwTJ1"],[4,1241513984],0],[35,45,40,36,-66,[0,"30VASEC4JOwZU45ru7mWLs"]],[62,-67,[0,"a00+1iL5tPlLqwE/1gUtxj"]]],[1,"17KUeQqzBLNorWBRcGO/by",1,0]],[8,"Title",33554432,2,[-70,-71],[[7,-68,[0,"47FohyVf5HmI88KyXC81Az"]],[129,17,-0.05,false,false,-69,[0,"86490//o1JRIIiGUCe04DG"]]],[1,"b4FT+6dQhF9q3E35+jJjXV",1,0],[1,0,335,0]],[8,"Sound",33554432,3,[-73,-74,-75],[[7,-72,[0,"d02/xEfiRF3acFCQxKuFsr"]]],[1,"56zW5XNI9O44d9DYja5ztR",1,0],[1,0,150,0]],[8,"Music",33554432,3,[-77,-78,-79],[[7,-76,[0,"c8FTqtBwlCx6hhAzSeWB7L"]]],[1,"51n1R0h3RI9opMIhvK+va9",1,0],[1,0,50,0]],[8,"Vibration",33554432,3,[-81,-82,-83],[[7,-80,[0,"85IwmLuNBJEoMeEmJuVEcZ"]]],[1,"f6q0ohI1dKMqX8hRCDR+/z",1,0],[1,0,-50,0]],[8,"BulletScreen",33554432,3,[-85,-86,-87],[[7,-84,[0,"a5gpIaH5ZNyYF0RRTpU4j+"]]],[1,"aaUEYPrJFDP7/XaGu/LuMT",1,0],[1,0,-150,0]],[8,"CloseBtn",33554432,2,[6],[[7,-88,[0,"96bNQRv0tIzKIo8pjRrxrd"]],[130,33,0.1,-0.1,-0.05,false,false,false,-89,[0,"47IW50KwtH9I608ho3+dYF"]]],[1,"76vRutq89F9IdYeezVF6Gm",1,0],[1,250,335,0]],[8,"Id",33554432,2,[-92],[[7,-90,[0,"d4qwi/QTpMfp0+UxxfBtYn"]],[76,20,350,0.18,false,100,-91,[0,"89Qc04lGJFq6n2NxxAkb5J"]]],[1,"f1V1sX3RxPq7251luVeBxp",1,0],[1,0,-174,0]],[8,"Exit",33554432,2,[11],[[7,-93,[0,"2dxtQDXFxP8Jv/5tzDDrWC"]],[76,20,350,0.05,false,100,-94,[0,"71am9vdoRASZdmjSE+0RtP"]]],[1,"76/+PfR5ZB/oIeN2+GHL3b",1,0],[1,0,-265,0]],[11,"Sprite",33554432,4,[[4,-95,[0,"2bNqaOJKRFlYHnAfvz3OOg"],[5,960,640]],[22,0,-96,[0,"c3J3XnYMxL27seJRLQAytZ"],15],[35,45,40,36,-97,[0,"01XbRZPCtNZrcerIR2MgcH"]]],[1,"3egicFC4hLl6Rx9K9BHIEC",1,0]],[11,"Sprite",33554432,13,[[4,-98,[0,"57FfhCA+ZBXbGfgg0S0YRE"],[5,200,100]],[60,0,-99,[0,"39RBVlI7hHV4M3UcwAn0D7"],[4,4278190080],1]],[1,"13E3s++xJEI7+/WPRHDjqg",1,0]],[11,"Label",33554432,13,[[4,-100,[0,"1cQgnXt7JMeY7DbmH2gCso"],[5,100,63]],[85,"设置",50,50,50,-101,[0,"58Hgsl0KJGy5oJUfkqPf4o"]]],[1,"57w8e9Bu9Oe4OX/jCd8nW4",1,0]],[97,"Label",512,33554432,6,[[4,-102,[0,"d4FrwEnF5BvLCkWXatr9VO"],[5,50,126]],[154,"x",100,100,100,false,-103,[0,"f0HK/h9uhGdYHPppjxMOsv"]]],[1,"a1G8kn9EtCXLOqF+syJDmf",1,0],[1,0,10,0]],[8,"Sprite",33554432,14,[-105],[[7,-104,[0,"57/KXJe/lD6Y7Og2OV4LIu"]]],[1,"cbbRjYJ+pMyp+pHptmqW8J",1,0],[1,-100,0,0]],[11,"Sprite",33554432,25,[[4,-106,[0,"a9CBFwk/ZJ+Zdagw1EPJbZ"],[5,50,50]],[22,0,-107,[0,"deXWbgSlRLqKOiyYL0ceI4"],3]],[1,"51sWlKYPNI969UYoqTvHm4",1,0]],[31,"Label",33554432,14,[-109],[[7,-108,[0,"feob8hezVBjp9ePk/l/GV3"]]],[1,"6aKtKU/xJB5rj+yOgTHHPy",1,0]],[11,"Label",33554432,27,[[4,-110,[0,"3edSqo1ShDq7ufXfdB/Uzx"],[5,100,63]],[36,"音效",50,50,50,-111,[0,"cdtuCEhKxLTL+YhJdamai2"],[4,4278190080]]],[1,"a7AevAhS1BHLkqWKZkTdsS",1,0]],[8,"Node",33554432,14,[7],[[7,-112,[0,"4aPg41f/VGXoHg9Qe31XfI"]]],[1,"ffvR5/BSRO8JSfH+53wsvW",1,0],[1,120,0,0]],[43,"Checkmark",33554432,7,[[[4,-113,[0,"47s7dr9uZGGKkUzeNWCh8D"],[5,26,26]],-114],4,1],[1,"fdxnP07wNF6KouRVMA+T4O",1,0]],[8,"Sprite",33554432,15,[-116],[[7,-115,[0,"369YjURJlF/6F7ZvkKvKnY"]]],[1,"cfmUiDV6BN/Luu9VnFOu3P",1,0],[1,-100,0,0]],[11,"Sprite",33554432,31,[[4,-117,[0,"58k8eyjZ9OC6nwqhr3VYpK"],[5,50,50]],[22,0,-118,[0,"6axC4fxapEw7XGLF7v0xFy"],5]],[1,"degg/P4GVHCLat2hxIlPwr",1,0]],[31,"Label",33554432,15,[-120],[[7,-119,[0,"96onj9RzNIY49n4rQ/7MiF"]]],[1,"4fYXwouf1DvYHrnV0sntL6",1,0]],[11,"Label",33554432,33,[[4,-121,[0,"7cXDJzAaJDj7FvsJgN7OPt"],[5,100,63]],[36,"音乐",50,50,50,-122,[0,"4b1z/IO8dGDp47srtBdHVC"],[4,4278190080]]],[1,"78oPdaDBpA4KWnvCkrykam",1,0]],[8,"Node",33554432,15,[8],[[7,-123,[0,"c0mmpe4XhDMatINe4+nKg9"]]],[1,"29oiC39k1FKLgMnZx17bEV",1,0],[1,120,0,0]],[43,"Checkmark",33554432,8,[[[4,-124,[0,"93YL9ee1ZFyLGbcNTFOyq0"],[5,26,26]],-125],4,1],[1,"ccQZcHNodAuKUisJB8peVK",1,0]],[8,"Sprite",33554432,16,[-127],[[7,-126,[0,"6bMBeFbh5NcqzSES4/VAyE"]]],[1,"e8ej5QQAJAub5Y9cvf5EIh",1,0],[1,-100,0,0]],[11,"Sprite",33554432,37,[[4,-128,[0,"06Dy27tFhJepni3dTdyHMz"],[5,50,50]],[22,0,-129,[0,"64g6V/+jxI4IAM3IWhiL0O"],7]],[1,"52qZSChUpNSqitfn3Z95SF",1,0]],[31,"Label",33554432,16,[-131],[[7,-130,[0,"51rCjTOMJBwY4ntuU3cCcE"]]],[1,"bc830OatJFz5BIP4gXxBjn",1,0]],[11,"Label",33554432,39,[[4,-132,[0,"e7XTsw5XhH6K2SIbFx8r8p"],[5,100,63]],[36,"震动",50,50,50,-133,[0,"7dDAMOf6dK+5qe/dL/7vH2"],[4,4278190080]]],[1,"6blwU4O+dPbKGQt8xdYFuO",1,0]],[8,"Node",33554432,16,[9],[[7,-134,[0,"0fWK2UYg5A7am2uVTSieKZ"]]],[1,"44ov8kCwNIP7Ugb4NtugEx",1,0],[1,120,0,0]],[43,"Checkmark",33554432,9,[[[4,-135,[0,"1agXHC/NVJX7H10eBFczOd"],[5,26,26]],-136],4,1],[1,"a4ZnVB7ONNvrZwdPb2Uw1W",1,0]],[8,"Sprite",33554432,17,[-138],[[7,-137,[0,"2aTWrLGsdAWol7QuOln1Za"]]],[1,"93NoLk9mBODKjKikAoK7+/",1,0],[1,-100,0,0]],[11,"Sprite",33554432,43,[[4,-139,[0,"95N/lYpLVGd4vu7kUCNK2H"],[5,50,50]],[22,0,-140,[0,"cezlvBnt1IgrG+7td9EG3h"],10]],[1,"6fUwsXhBBGd6S8pijSPkGS",1,0]],[31,"Label",33554432,17,[-142],[[7,-141,[0,"13ermDhXpCtIo0E1ZJxy6r"]]],[1,"09F4gwQ0ZDi5gbfjX1OPBH",1,0]],[11,"Label",33554432,45,[[4,-143,[0,"0b0ssfwBxA+ZB0bWGHXrfJ"],[5,100,63]],[36,"弹幕",50,50,50,-144,[0,"3d2jVTMBBLZKcOV0vdZn6u"],[4,4278190080]]],[1,"ednfe8gWdMAbBBCPAGPrpK",1,0]],[8,"Node",33554432,17,[10],[[7,-145,[0,"83X5P2+4BEi4f/DtMUZklA"]]],[1,"c1LoOuHZNORoLRKcCcDJr/",1,0],[1,120,0,0]],[43,"Checkmark",33554432,10,[[[4,-146,[0,"38GV9NWsBI8IbhtXBxNg2i"],[5,26,26]],-147],4,1],[1,"a5KZveJ5pIhKAS+DlM27Ij",1,0]],[11,"Label",33554432,19,[[4,-148,[0,"80S8+bmGFHwr4CjV/VdKTK"],[5,263.89,63]],[36,"ID:xxxxxxxx",50,50,50,-149,[0,"d59ue9KMtAPaINI7SaEo8T"],[4,4278190080]]],[1,"2dD92wiH9A4bahmtjJY8im",1,0]],[66,"Label",512,33554432,11,[[4,-150,[0,"cca7pRyUxGs5O9OQjDS6IO"],[5,160,126]],[155,"放弃挑战",40,100,false,-151,[0,"97c+rsRWJNnqJ1q0aVmsBI"],[4,4278190080]]],[1,"f2+E2XfRZL5YRk4cET+Slp",1,0]],[11,"Label",33554432,4,[[4,-152,[0,"0bz31S8EpFnog7oOjmFeJF"],[5,466.75,126]],[85,"返回Home",100,100,100,-153,[0,"4ekSnAvT5IA7FbPdLeGHb8"]]],[1,"ecSYifA8pB7KIHUBH5Ckm0",1,0]],[86,2,6,[0,"3fV/eWMt1OHJjmha0iFvEv"],[4,4292269782],6],[151,0,30,[0,"eez0yl851JpLFHBUOZc+jH"],[4,4293388263]],[84,7,[0,"36O2nto0RJvLj/809h60Jv"],[4,4292269782],7,53],[61,0,36,[0,"66lLtj88pGD4/Wa6uTaP0T"]],[84,8,[0,"05kceSmxhACZUf/XFgQdsG"],[4,4292269782],8,55],[61,0,42,[0,"aeh9svPkxCS7QSiOeEZ/kb"]],[61,0,48,[0,"eeC4FyKLlK9prsEj4xqk5T"]],[86,2,11,[0,"97yKSZ+QVF5LN0A4G1dht1"],[4,4292269782],11]],0,[0,3,1,0,0,1,0,0,1,0,25,56,0,26,54,0,27,4,0,28,59,0,29,52,0,30,5,0,0,1,0,-1,5,0,-2,4,0,0,2,0,0,2,0,0,2,0,-1,13,0,-2,18,0,-3,3,0,-4,19,0,-5,20,0,0,3,0,0,3,0,0,3,0,-1,14,0,-2,15,0,-3,16,0,-4,17,0,0,4,0,0,4,0,0,4,0,-1,21,0,-2,51,0,0,5,0,0,5,0,-1,12,0,0,6,0,0,6,0,-3,52,0,-1,24,0,0,7,0,0,7,0,-3,54,0,-1,30,0,0,8,0,0,8,0,-3,56,0,-1,36,0,0,9,0,0,9,0,22,57,0,13,9,0,0,9,0,-1,42,0,0,10,0,0,10,0,22,58,0,13,10,0,0,10,0,-1,48,0,0,11,0,0,11,0,-3,59,0,-1,50,0,0,12,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,-1,22,0,-2,23,0,0,14,0,-1,25,0,-2,27,0,-3,29,0,0,15,0,-1,31,0,-2,33,0,-3,35,0,0,16,0,-1,37,0,-2,39,0,-3,41,0,0,17,0,-1,43,0,-2,45,0,-3,47,0,0,18,0,0,18,0,0,19,0,0,19,0,-1,49,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,-1,26,0,0,26,0,0,26,0,0,27,0,-1,28,0,0,28,0,0,28,0,0,29,0,0,30,0,-2,53,0,0,31,0,-1,32,0,0,32,0,0,32,0,0,33,0,-1,34,0,0,34,0,0,34,0,0,35,0,0,36,0,-2,55,0,0,37,0,-1,38,0,0,38,0,0,38,0,0,39,0,-1,40,0,0,40,0,0,40,0,0,41,0,0,42,0,-2,57,0,0,43,0,-1,44,0,0,44,0,0,44,0,0,45,0,-1,46,0,0,46,0,0,46,0,0,47,0,0,48,0,-2,58,0,0,49,0,0,49,0,0,50,0,0,50,0,0,51,0,0,51,0,14,1,2,2,5,6,2,18,7,2,29,8,2,35,9,2,41,10,2,47,11,2,20,153],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,52,52,52,53,54,55,56,57,58,59,59,59,59],[1,1,1,1,1,1,1,1,1,7,1,1,7,1,1,1,7,10,11,12,1,7,1,7,1,1,7,10,11,12],[26,1,13,6,3,6,3,6,3,3,6,3,3,0,0,1,13,0,2,1,7,3,7,3,7,7,0,0,2,1]],[[[24],[26,"BakingMold_03",[-2],[1,"551rf16/FbMoBJkAW88cMr",-1,0]],[39,"BakingMold_03",1,[[21,-3,[0,"ebvLbnczpQToK86Hn/oRuY"],[0],[10],1]],[1,"25TsbT6PFVTJIlwJ4o8tOV",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,14,1,3],[0,0],[-1,8],[27,28]],[[[12,".bin",4000195120,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":2640,"count":660,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.15296578407287598,-3.554635474856127e-9,-0.12388952821493149],"maxPosition",8,[1,0.1529657542705536,0.05508299544453621,0.12388952821493149]]],-1],0,0,[],[],[]],[[[9,"KitchenPack_TextureAtlas_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":0,"emissiveFactor":1,"metallic":0,"specularFactor":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[29,4]],[[[57,"OpenAre"],[98,"OpenAre",false,33554432,[-6],[[4,-2,[0,"f9dPiMO9FLsrxWRB2vAMCh"],[5,640,960]],[164,-3,[0,"b5y+5wnehNRKs+4agj6OYS"]],[79,1,0,-4,[0,"06kxZNLQdIwac8V1aHwb2y"],[4,4278321666],5],[62,-5,[0,"fbrIiNGw1GbJn3Vv+DzzhN"]]],[1,"b8yZxrLNFMco6Hwq92OO66",-1,0]],[8,"btn_close",33554432,1,[-14],[[4,-7,[0,"72tUaJmvJNdotFNYiGKpAD"],[5,100,40]],[80,1,0,-8,[0,"73XnJgABFON4QJ4HoKlRPj"],0],[162,2,-11,[0,"95Kjod/cdHZ7Zq69S80/11"],[[28,"ac83bkhEr5IFYux+rjOxgvH","CloseRank",-10]],[4,4292269782],-9,1,2,3,4],[131,9,13.726999999999975,526.273,-58.30499999999995,100,-12,[0,"adB9Z0ARFKUrTp+AZmWWpe"]],[165,-13,[0,"c73HPuVTFLSYFo7oKyhKLR"]]],[1,"12WzqA5OlMHYtcqRzNf45H",1,0],[1,-256.273,518.305,0]],[66,"Label",512,33554432,2,[[4,-15,[0,"3eswPd+EVAv7hUKt6NsTd4"],[5,100,40]],[156,"close",20,20,1,false,-16,[0,"fafvYzzYRD2oFfZ/DX/TOx"],[4,4278190080]]],[1,"19wtQBa5JOc4G8tO3WtK74",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,13,2,0,19,2,0,0,2,0,0,2,0,0,2,0,-1,3,0,0,3,0,0,3,0,14,1,16],[0,0,0,0,0,0],[1,7,10,11,12,1],[0,0,0,2,1,1]],[[[56,"battle3",".mp3",33.444167],-1],0,0,[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[30]],[[{"name":"default_sprite","rect":{"x":0,"y":2,"width":40,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-20,-18,0,20,-18,0,-20,18,0,20,18,0],"indexes":[0,1,2,2,1,3],"uv":[0,38,40,38,0,2,40,2],"nuv":[0,0.05,1,0.05,0,0.95,1,0.95],"minPos":{"x":-20,"y":-18,"z":0},"maxPos":{"x":20,"y":18,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[31]],[[[12,".bin",1175282145,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4928,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4928,"count":88,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.4999999701976776,-3.725299180246111e-9,-1.9371509552001953e-7],"maxPosition",8,[1,0.4999999701976776,0.9704079031944275,0.6606320142745972]]],-1],0,0,[],[],[]],[[[24],[26,"KitchenCounter_01",[-2],[1,"69mqxICohfZaaVUseg6Tah",-1,0]],[67,"KitchenCounter_01",1,[-4,-5],[[21,-3,[0,"4d2q93uk5QJ4VL6ikuLcrJ"],[4],[10],5]],[1,"d0CTTOeQ1Vz7AaZLf2EK3M",1,0]],[58,"KitchenCounter_01_Door_R",2,[[21,-6,[0,"a1h1OOeL5b05CzpWoP5mQq"],[0],[10],1]],[1,"aflsranolV8pwzAIi8prGT",1,0],[1,0.461719274520874,0.44016751646995544,0.6710004806518555]],[58,"KitchenCounter_01_Door_L",2,[[21,-7,[0,"e8ECXNIfFVEJ8DkBpbBa+h"],[2],[10],3]],[1,"86IRyQzxFVgpEozrdMtvHb",1,0],[1,-0.4576277732849121,0.44016754627227783,0.6710004806518555]]],0,[0,3,1,0,-1,2,0,0,2,0,-1,3,0,-2,4,0,0,3,0,0,4,0,14,1,7],[0,0,0,0,0,0],[-1,8,-1,8,-1,8],[10,32,10,33,10,34]],[[[9,"KitchenPack_TextureAtlas_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":0,"emissiveFactor":1,"metallic":0,"specularFactor":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[35,4]],[[[12,".bin",2568844405,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3808,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3808,"count":68,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.45224809646606445,-0.3558472990989685,-0.0103684663772583],"maxPosition",8,[1,1.4901161193847656e-7,0.3558472692966461,0.05050915479660034]]],-1],0,0,[],[],[]],[[[12,".bin",3150583199,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":432,"count":108,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":72,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-2.9802322387695312e-8,-0.3558472990989685,-0.0103684663772583],"maxPosition",8,[1,0.452248215675354,0.3558472990989685,0.05050915479660034]]],-1],0,0,[],[],[]],[[[9,"lang",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[36,8]],[[[9,"caiban",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[37,8]],[[[166,"Main"],[99,"Canvas",33554432,"9a7w2PyPtMJL1yD9XDbdJ+",[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18],[[3,-1,[5,640,960]],[167,-3,-2],[132,45,-5.684341886080802e-14,-5.684341886080802e-14,-5.684341886080802e-14,-4]],[1,319.99999999999994,479.99999999999994,0]],[13,"btn_login",33554432,1,[-27],[[3,-19,[5,180.348,91.59899999999999]],[18,1,0,-20,6],[30,2,-23,[[28,"ac83bkhEr5IFYux+rjOxgvH","Login",-22]],[4,4292269782],-21,7,8,9,10],[50,-24],[133,36,577.8259999999999,10,274.20050000000003,261.4325,-0.17996666666666666,false,180.348,91.59899999999999,-25],[77,-26]],[1,219.826,-172.768,0]],[13,"btn_getlocation",33554432,1,[-35],[[3,-28,[5,180.348,91.59899999999999]],[18,1,0,-29,11],[30,2,-32,[[28,"ac83bkhEr5IFYux+rjOxgvH","GetLocation",-31]],[4,4292269782],-30,12,13,14,15],[50,-33],[134,12,720.671,274.20050000000003,264.31149999999997,-0.17696770833333336,false,false,180.348,91.59899999999999,-34]],[1,-229.826,-169.88900000000004,0]],[13,"btn_updateRank",33554432,1,[-43],[[3,-36,[5,180.348,91.59899999999999]],[18,1,0,-37,40],[30,2,-40,[[28,"ac83bkhEr5IFYux+rjOxgvH","UpdataFriendRank",-39]],[4,4292269782],-38,41,42,43,44],[78,36,0.70460625,8.704000000000008,274.20050000000003,164.1235,-0.1719953125,false,false,180.348,91.59899999999999,-41],[50,-42]],[1,221.12199999999999,-270.077,0]],[13,"btn_rank",33554432,1,[-51],[[3,-44,[5,180.348,91.59899999999999]],[18,1,0,-45,45],[30,2,-48,[[28,"ac83bkhEr5IFYux+rjOxgvH","OpenRank",-47]],[4,4292269782],-46,46,47,48,49],[78,12,-0.0017635416666667092,720.671,274.20050000000003,164.1235,-0.1719953125,false,false,180.348,91.59899999999999,-49],[50,-50]],[1,-230.95466666666667,-270.077,0]],[68,0,null,[17,"4e5M+n7z1ekJUzqKL7XrJ0",-58,[168,"ffg7idWu1DZbIHvUFWXewX",null,[[88,[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[-55,-56,-57]]],[[171,[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[[89,-54,[174,[1,2.959,5.525,-1.395],[1,90,0,0],[1,25,30,25]],[[15,[0,3,3],[1,1.785,2.442,-0.901],[1,90,0,0],[1,18,18,15]],[15,[0,3,4],[1,1.785,3.552,-0.901],[1,90,0,0],[1,18,18,17]],[15,[0,4,4],[1,2.767,3.428,-1.148],[1,90,0,0],[1,24,24,17]],[15,[0,4,5],[1,2.767,4.291,-1.148],[1,90,0,0],[1,24,24,20]],[15,[0,5,5],[1,3.882,4.291,-1.359],[1,90,0,0],[1,30,30,20]],[15,[0,5,6],[1,3.882,5.382,-1.359],[1,90,0,0],[1,30,30,24]],[15,[0,2,2],[1,0.85,1.359,-0.374],[1,90,0,0],[1,13,10,10]],[15,[0,4,6],[1,2.983,5.415,-0.642],[1,90,0,0],[1,26,16,23]],[15,[0,5,7],[1,3.922,6.385,-0.512],[1,90,0,0],[1,32,10,27]]]]]]],[[19,"CuttingBoard_02",["_name"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]]],[6,["_lpos"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[1,3.991,6.385,-0.512]],[6,["_lscale"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[1,29,10,27]],[6,["_lrot"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[6,["_euler"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]],[1,90,0,0]],[20,["_materials","0"],[2,["b9Ywi4g1pQWZiAa3fY2CHv"]],71],[19,1,["_shadowCastingMode"],[2,["b9Ywi4g1pQWZiAa3fY2CHv"]]],[19,true,["_active"],[2,["4e5M+n7z1ekJUzqKL7XrJ0"]]],[5,["_lpos"],-52,[1,0,0.026,0]],[16,false,["_active"],-53]]],64]],[178,"Main",[-68,-69,-70,-71,1,-72,-73],[149,"6796397a-6b55-49ec-a8de-2800353a27a9",[-59,-60,-61,-62,-63,-64,6,-65,-66,-67]],[179,[180,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[181,true,1,[4,4283190348]],[182,true,78,79],[183],[184]]],[69,"Wnd",false,33554432,[-76,-77,-78,-79],[[3,-74,[5,960,640]],[25,45,100,100,-75]]],[100,"SetSizePanel",false,33554432,1,[-85,-86,-87],[[14,-80],[135,12,0.1,0.1,false,false,-81],[185,-84,-83,-82]],[1,-334,-206,0]],[116,"Button",33554432,[-91,-92],[[[3,-88,[5,200,100]],[18,1,0,-89,5],-90],4,4,1]],[69,"SwichScenePerformance",false,33554432,[-96,-97],[[3,-93,[5,960,640]],[25,45,100,100,-94],[153,-95]]],[101,"Bg","e5jlvSkGVL24ocsK+OgP6r",7,[-98,-99,-100,-101,6,-102]],[70,"Level","64Z5bVupJGe6ar5CCK4MTe",7,[[186,-103,[[[0,2,2],[0,4,6],[0,5,7]],8,8,8]],[187,4,6,2.1,-104],[188,-105,1],[189,-107,-106]]],[117,"SizeXEditBox",33554432,9,[-111,-112],[[[14,-108],[18,1,0,-109,2],-110],4,4,1]],[118,"SizeYEditBox",33554432,9,[-116,-117],[[[14,-113],[18,1,0,-114,3],-115],4,4,1],[1,174.457,0,0]],[40,"Button",33554432,[-123],[[14,-118],[18,1,0,-119,17],[30,2,-122,[[28,"fbeafSheD1I9YnUK0AESgEr","open",-121]],[4,4292269782],-120,19,20,21,22]]],[2,["66YzTeS3pDq4DOw6ljn69x"]],[13,"FuncBtns",33554432,1,[-126,-127,-128],[[3,-124,[5,640,100]],[136,44,0.05,false,100,-125]],[1,0,-382,0]],[40,"Button",33554432,[-133],[[3,-129,[5,200,100]],[18,1,0,-130,23],[30,2,-132,[[28,"081f4vBtXVEgpn8VG2jEJsI","refreshLv",13]],[4,4292269782],-131,24,25,26,27]]],[40,"Button",33554432,[-138],[[3,-134,[5,200,100]],[18,1,0,-135,28],[87,2,-137,[4,4292269782],-136,29,30,31,32]]],[40,"Button",33554432,[-143],[[3,-139,[5,200,100]],[18,1,0,-140,33],[87,2,-142,[4,4292269782],-141,34,35,36,37]]],[41,"LevelBeginWnd",33554432,1,[-149,11],[[3,-144,[5,640,960]],[25,45,100,100,-145],[190,-148,-147,-146,11]]],[102,"Wnd",false,33554432,22,[-152,-153],[[3,-150,[5,960,640]],[25,45,100,100,-151]]],[120,"Other","c9MG0WxEtDwoOeBiwMh49Y",7,[[[71,"————————",-154],-155,-156,[103,"2DCamPos",false,-157,[1,4.5,1,25]],[71,"————————-",-158]],4,1,1,4,4]],[41,"LevelWinWnd",33554432,1,[8],[[3,-159,[5,640,960]],[25,45,100,100,-160],[191,-164,8,-163,-162,-161]]],[104,"Label",33554432,[-168],[[3,-165,[5,150,189]],[45,"用时：",50,50,150,-166],[137,16,-0.5,false,-167]],[1,-50,0,0]],[13,"LevelTimer",33554432,1,[-173],[[14,-169],[138,1,0.08,false,-170],[192,-172,-171]],[1,0,353.2,0]],[13,"Date",33554432,1,[-178],[[14,-174],[139,17,false,-175],[193,-177,-176]],[1,0,430,0]],[2,["b8yZxrLNFMco6Hwq92OO66"]],[2,["1akX4395FUSbSMjECaWR4k"]],[2,["1akX4395FUSbSMjECaWR4k"]],[29,"Bg",33554432,8,[[3,-179,[5,960,640]],[81,0,-180,[4,1694498815],4],[25,45,100,100,-181]]],[13,"Title",33554432,8,[-184],[[3,-182,[5,960,100]],[140,41,0.1,false,100,-183]],[1,0,206,0]],[13,"UseTime",33554432,8,[26],[[14,-185],[141,1,0.2,false,false,-186]],[1,0,142,0]],[34,"UseTimeLabel",33554432,26,[[[3,-187,[5,177.78,189]],-188,[142,8,1,1,false,false,177.78,-189]],4,1,4],[1,163.89,0,0]],[13,"Btns",33554432,8,[10],[[14,-190],[143,1,0.3,0.2,false,false,100,-191]],[1,0,78,0]],[34,"Label-001",33554432,10,[[[3,-192,[5,80.62,63]],-193,[144,4,-1,-0.8,false,false,40,-194]],4,1,4],[1,0,-98.5,0]],[41,"Sprite",33554432,28,[-197],[[3,-195,[5,270,70]],[81,0,-196,[4,4278190080],16]]],[13,"SettingBtn",33554432,1,[16],[[14,-198],[145,9,0.01,0.02,false,false,-199]],[1,-263.6,410.8,0]],[27,0,{},1,[17,"66YzTeS3pDq4DOw6ljn69x",-200,[37,"4aDiBqYZFGKLJbQCrYZ+1v",[[16,"SettingWnd",["_name"],17],[5,["_lpos"],17,[1,0,0,0]],[5,["_lscale"],17,[1,1,1,1]],[5,["_lrot"],17,[3,0,0,0,1]],[5,["_euler"],17,[1,0,0,0]],[6,["_contentSize"],[2,["5a7tV2Jb9NCqDk/TtMprKM"]],[5,640,960]],[6,["_contentSize"],[2,["3eOr9tpDNCzb7x5duhICfS"]],[5,640,960]],[6,["_contentSize"],[2,["0dSJI0LY1KM6u39pRgYi1p"]],[5,640,960]],[16,true,["_active"],17],[19,false,["_active"],[2,["83o+y9dgZJyb/LDxYaeeWs"]]]]],18]],[13,"Btn0",33554432,18,[19],[[14,-201],[146,8,0.1,false,-202]],[1,-206,0,0]],[41,"Btn1",33554432,18,[20],[[14,-203],[77,-204]]],[13,"Btn2",33554432,18,[21],[[14,-205],[147,32,0.1,false,-206]],[1,206,0,0]],[29,"Bg",33554432,23,[[3,-207,[5,960,640]],[82,0,-208,38],[25,45,100,100,-209]]],[29,"Sprite",33554432,11,[[3,-210,[5,960,640]],[82,0,-211,39],[25,45,40,36,-212]]],[2,["deDfeQroBcuqWr7aayJ+8J"]],[2,["deDfeQroBcuqWr7aayJ+8J"]],[27,0,null,12,[17,"69mqxICohfZaaVUseg6Tah",-214,[169,"6d79J7fb5Ff6PXWD8n4sd2",null,[[88,[2,["69mqxICohfZaaVUseg6Tah"]],[-213]]],[[19,"KitchenCounter_01",["_name"],[2,["69mqxICohfZaaVUseg6Tah"]]],[6,["_lpos"],[2,["69mqxICohfZaaVUseg6Tah"]],[1,-8.706,4.415,-5.724]],[6,["_lscale"],[2,["69mqxICohfZaaVUseg6Tah"]],[1,45,3,30]],[6,["_lrot"],[2,["69mqxICohfZaaVUseg6Tah"]],[3,0.5,0.4999999999999999,0.5,0.5000000000000001]],[6,["_euler"],[2,["69mqxICohfZaaVUseg6Tah"]],[1,90,0,90]],[20,["_materials","0"],[2,["4d2q93uk5QJ4VL6ikuLcrJ"]],75],[20,["_materials","0"],[2,["a1h1OOeL5b05CzpWoP5mQq"]],76],[20,["_materials","0"],[2,["e8ECXNIfFVEJ8DkBpbBa+h"]],77],[19,true,["_active"],[2,["69mqxICohfZaaVUseg6Tah"]]],[6,["_lpos"],[2,["d0CTTOeQ1Vz7AaZLf2EK3M"]],[1,0,0,0.066]]]],72]],[119,"Main Camera","11oSniurpBtJlbnc4eEv2j",7,[[-215,[89,-216,[175,[1,3,-15,32],[1,30,0,0]],[[23,[0,3,3],[1,1.782,-6.144,13.495],[1,30,0,0]],[23,[0,3,4],[1,1.782,-5.539,13.844],[1,30,0,0]],[23,[0,4,4],[1,2.765,-8.314,18.465],[1,30,0,0]],[23,[0,4,5],[1,2.765,-7.485,18.943],[1,30,0,0]],[23,[0,5,5],[1,3.864,-10.116,22.832],[1,30,0,0]],[23,[0,5,6],[1,3.864,-9.469,23.205],[1,30,0,0]],[23,[0,2,2],[1,0.851,-4.44,9.124],[1,30,0,0]],[23,[0,4,6],[1,2.989,-6.843,19.068],[1,30,0,0]],[23,[0,5,7],[1,4.002,-8.389,23.032],[1,30,0,0]]]]],1,4],[1,4.002,-8.389,23.032],[3,0.25881904510252074,0,0,0.9659258262890683],[1,30,0,0]],[73,"TEXT_LABEL",false,33554432,14,[[[44,-217,[5,98,100],[0,0,1]],-218],4,1],[1,-48,50,0]],[34,"PLACEHOLDER_LABEL",33554432,14,[[[44,-219,[5,98,100],[0,0,1]],-220],4,1],[1,-48,50,0]],[105,"RichText",33554432,9,[[3,-221,[5,26.68,50.4]],[194,"X",-222]],[1,87,0,0]],[73,"TEXT_LABEL",false,33554432,15,[[[44,-223,[5,98,100],[0,0,1]],-224],4,1],[1,-48,50,0]],[34,"PLACEHOLDER_LABEL",33554432,15,[[[44,-225,[5,98,100],[0,0,1]],-226],4,1],[1,-48,50,0]],[29,"Label",33554432,33,[[3,-227,[5,200,189]],[45,"胜利",100,100,150,-228]]],[29,"Label",33554432,10,[[3,-229,[5,150,50.4]],[157,"下一关",50,50,false,-230,[4,4278190080]]]],[74,"Label",33554432,27,[[[3,-231,[5,126.77,126]],-232],4,1]],[32,"Label",512,33554432,2,[[3,-233,[5,132.488,63.525999999999996]],[46,"登陆",60,60,1,false,-234,[4,4278190080]]]],[59,"Label",512,33554432,3,[[3,-235,[5,179.92399999999998,63.525999999999996]],[46,"获取地理位置",30,30,1,false,-236,[4,4278190080]]],[1,0.6239999999999988,0,0]],[34,"Label",33554432,38,[[[3,-237,[5,186.64,50.4]],-238],4,1],[1,0,8,0]],[32,"Label",512,33554432,16,[[3,-239,[5,100,40]],[158,"设置",40,50,1,false,-240,[4,4278190080]]]],[32,"Label",512,33554432,19,[[3,-241,[5,100,126]],[47,"刷新",50,50,100,false,-242,[4,4278190080]]]],[32,"Label",512,33554432,20,[[3,-243,[5,127.81,126]],[47,"功能2",50,50,100,false,-244,[4,4278190080]]]],[32,"Label",512,33554432,21,[[3,-245,[5,127.81,126]],[47,"功能3",50,50,100,false,-246,[4,4278190080]]]],[74,"Label",33554432,23,[[[3,-247,[5,400,339]],-248],4,1]],[29,"Label",33554432,11,[[3,-249,[5,400,126]],[45,"开始挑战",100,100,100,-250]]],[59,"Label",512,33554432,4,[[3,-251,[5,179.92399999999998,63.525999999999996]],[46,"上传分数",30,30,1,false,-252,[4,4278190080]]],[1,0.6239999999999988,0,0]],[59,"Label",512,33554432,5,[[3,-253,[5,179.92399999999998,63.525999999999996]],[46,"显示排行榜",30,30,1,false,-254,[4,4278190080]]],[1,0.6239999999999988,0,0]],[27,0,{},1,[17,"b8yZxrLNFMco6Hwq92OO66",-255,[37,"4dx1Ny5jhIZLLEYmx6R3oS",[[16,"OpenAre",["_name"],29],[5,["_lpos"],29,[1,5.684341886080802e-14,0,0]],[5,["_lscale"],29,[1,1,1,1]],[5,["_lrot"],29,[3,0,0,0,1]],[5,["_euler"],29,[1,0,0,0]]]],50]],[27,0,null,12,[17,"faH7spb+NfKKcFGV9LWCzS",-258,[37,"efhHXKhdhM67XJISekaePX",[[19,"Pan",["_name"],[2,["faH7spb+NfKKcFGV9LWCzS"]]],[6,["_lpos"],[2,["faH7spb+NfKKcFGV9LWCzS"]],[1,4.081,-1.5,-2.469]],[6,["_lscale"],[2,["faH7spb+NfKKcFGV9LWCzS"]],[1,0.6,0.6,0.6]],[6,["_lrot"],[2,["faH7spb+NfKKcFGV9LWCzS"]],[3,0.008726535498373935,5.343461882864696e-19,0.9999619230641713,6.123000841748846e-17]],[5,["_euler"],-256,[1,0,1,180]],[6,["_lpos"],[2,["cehE3ST25UNLMu7KCVn392"]],[1,0.001,0,1.854]],[6,["_lscale"],[2,["cehE3ST25UNLMu7KCVn392"]],[1,1,1,1]],[20,["_materials","0"],[2,["efrzNnL+datoAVMrL40fFE"]],56],[6,["_lrot"],[2,["cehE3ST25UNLMu7KCVn392"]],[3,0,0,0,1]],[6,["_euler"],[2,["cehE3ST25UNLMu7KCVn392"]],[1,0,0,0]],[16,false,["_active"],-257]]],55]],[27,0,null,12,[17,"aeKuE97idaVLZqlJ0c5qSD",-261,[63,"08h6nDMthNDKPKdxSqHVRo",null,[[19,"RoasterPan_01",["_name"],[2,["aeKuE97idaVLZqlJ0c5qSD"]]],[6,["_lpos"],[2,["aeKuE97idaVLZqlJ0c5qSD"]],[1,4.159,4.709,-1.497]],[6,["_lscale"],[2,["aeKuE97idaVLZqlJ0c5qSD"]],[1,30,30,30]],[6,["_lrot"],[2,["aeKuE97idaVLZqlJ0c5qSD"]],[3,0.7071067811865475,0,0,0.7071067811865476]],[5,["_euler"],-259,[1,90,0,0]],[20,["_materials","0"],[2,["6dfPK+v4tYYKxyHxdVRefu"]],58],[20,["_materials","0"],[2,["4dGjIVYINSj7Rheabuo38f"]],59],[16,false,["_active"],-260]]],57]],[27,0,null,12,[17,"beECIpx2ZXqKxMUvsbMygL",-264,[63,"0fJNci+JpGCIqKnBDA6Z9x",null,[[19,"GrillPan_01",["_name"],[2,["beECIpx2ZXqKxMUvsbMygL"]]],[6,["_lpos"],[2,["beECIpx2ZXqKxMUvsbMygL"]],[1,1.85,-7.334,2.61]],[6,["_lscale"],[2,["beECIpx2ZXqKxMUvsbMygL"]],[1,20,23,25]],[6,["_lrot"],[2,["beECIpx2ZXqKxMUvsbMygL"]],[3,4.329780281177466e-17,0.7071067811865475,0.7071067811865476,4.329780281177467e-17]],[5,["_euler"],-262,[1,90,0,180]],[20,["_materials","0"],[2,["840mO3BwFVuY2GI/P5LoWn"]],61],[16,false,["_active"],-263]]],60]],[27,0,null,12,[17,"551rf16/FbMoBJkAW88cMr",-267,[63,"d0BKiGfj5APLkx9hClgSGr",null,[[19,"BakingMold_03",["_name"],[2,["551rf16/FbMoBJkAW88cMr"]]],[6,["_lpos"],[2,["551rf16/FbMoBJkAW88cMr"]],[1,1.557,3.064,-0.687]],[6,["_lscale"],[2,["551rf16/FbMoBJkAW88cMr"]],[1,30,30,28.555]],[6,["_lrot"],[2,["551rf16/FbMoBJkAW88cMr"]],[3,0.5,0.4999999999999999,0.5,0.5000000000000001]],[5,["_euler"],-265,[1,90,0,90]],[20,["_materials","0"],[2,["ebvLbnczpQToK86Hn/oRuY"]],63],[16,false,["_active"],-266]]],62]],[75,0,6,[17,"1akX4395FUSbSMjECaWR4k",-268,[37,"01wEWIXnFOOKgzeKa73JVR",[[16,"model_caiban",["_name"],30],[5,["_lpos"],30,[1,0.002,0.049,-0.016]],[5,["_lscale"],30,[1,0.5065517241379311,0.5440740740740742,1.469]],[5,["_lrot"],30,[3,-0.7071067811865474,0,0,0.7071067811865477]],[5,["_euler"],30,[1,-89.99999999999997,0,0]],[5,["_lrot"],46,[3,0,0,0,1]],[5,["_euler"],46,[1,0,0,0]],[20,["_materials","0"],[2,["d5TWmPC+JWzoteUBfVCRSL"]],66],[5,["_lpos"],46,[1,0,-0.028,-0.069]],[5,["_lscale"],46,[1,1.182,1,1]]]],65],[{},"mountedRoot",1,6]],[75,0,6,[17,"1akX4395FUSbSMjECaWR4k",-269,[37,"474PBjlc1KP7qaiD4Buv+x",[[16,"model_caiban_shadow",["_name"],31],[5,["_lpos"],31,[1,0.002,0.057,-0.016]],[5,["_lscale"],31,[1,0.5065517241379311,0.5440740740740742,1.469]],[5,["_lrot"],31,[3,-0.7071067811865474,0,0,0.7071067811865477]],[5,["_euler"],31,[1,-89.99999999999997,0,0]],[5,["_lrot"],47,[3,0,0,0,1]],[5,["_euler"],47,[1,0,0,0]],[20,["_materials","0"],[2,["d5TWmPC+JWzoteUBfVCRSL"]],68],[5,["_lpos"],47,[1,0,-0.028,-0.069]],[5,["_lscale"],47,[1,1.0638,0.9,0.9]]]],67],[{},"mountedRoot",1,6]],[106,"233",48,[[49,"Plane<ModelComponent>",-270,[73],[10],74],[173,null,-271,[[15,[0,2,2],[1,0.087,1.384,0.297],[1,0,270.045,0],[1,0.044,0.139,0.012]],[15,[0,4,6],[1,0.298,1.384,0.424],[1,0,270,0],[1,0.064,0.139,0.019]],[15,[0,5,7],[1,0.367,1.384,0.424],[1,0,270,0],[1,0.067,0.139,0.023]]]]],[1,0.087,1.384,0.297],[3,0,0.7071067811865476,0,-0.7071067811865475],[1,0.044,0.139,0.012],[1,0,270,0]],[70,"Launch","c2M0g4SDBHEIkGvjqC7Zrd",7,[[195,-272,0]]],[107,"Main Light","c0y6F5f+pAvI805TdmxIjx",7,[[196,1000,true,2,0.13501,0.42,155.5,-273,[197]]],[1,9.267,17.938,-7.952],[3,0.07480362298460298,-0.04097919549760083,-0.6620479666944683,0.7445922463472654],[1,26.988,17.577,-82.767]],[198,14,1822425087,49],[121,"Camera",1,[-274],[1,0,0,1000]],[199,0,1073741824,480,2000,6,41943040,80,[4,4278190080]],[48,"",50,50,100,1,false,50,[4,4278190080]],[48,"",50,50,100,1,false,51,[4,4278190080]],[90,6,8,14,82,83],[48,"",50,50,100,1,false,53,[4,4278190080]],[48,"",50,50,100,1,false,54,[4,4278190080]],[90,6,8,15,85,86],[159,"xx:xx:xx",0,50,50,150,35],[47,"axb",50,50,50,false,37,[4,4278190080]],[163,2,10,[4,4292269782],10],[160,60,60,100,57,[4,4278190080]],[161,"-xx月xx日-",40,60,[4,4283953631]],[45,"过场表现\n第xx关",100,100,150,65],[108,"Cube",false,24,[[49,"Cube<ModelComponent>",-275,[51],[10],52]]],[109,"Cube-001",false,24,[[49,"Cube<ModelComponent>",-276,[53],[10],54]],[1,8.8,8.8,0]],[2,["faH7spb+NfKKcFGV9LWCzS"]],[2,["aeKuE97idaVLZqlJ0c5qSD"]],[2,["beECIpx2ZXqKxMUvsbMygL"]],[2,["551rf16/FbMoBJkAW88cMr"]],[110,"12",6,[[49,"Plane<ModelComponent>",-277,[69],[10],70]],[1,0,-0.115,0.027],[1,0.037,0.053,0.053]],[2,["9fp/kIPBlbraUrgNq5K3lG"]]],0,[0,0,1,0,31,81,0,0,1,0,0,1,0,-1,80,0,-2,9,0,-3,25,0,-4,27,0,-5,2,0,-6,3,0,-7,28,0,-8,39,0,-9,18,0,-10,40,0,-11,22,0,-12,4,0,-13,5,0,-14,69,0,0,2,0,0,2,0,13,2,0,19,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,58,0,0,3,0,0,3,0,13,3,0,19,3,0,0,3,0,0,3,0,0,3,0,-1,59,0,0,4,0,0,4,0,13,4,0,19,4,0,0,4,0,0,4,0,0,4,0,-1,67,0,0,5,0,0,5,0,13,5,0,19,5,0,0,5,0,0,5,0,0,5,0,-1,68,0,4,101,0,4,101,0,0,6,0,-1,74,0,-2,75,0,-3,100,0,3,6,0,-1,40,0,-2,69,0,-3,70,0,-4,71,0,-5,72,0,-6,73,0,-8,74,0,-9,75,0,-10,48,0,-1,77,0,-2,78,0,-3,13,0,-4,49,0,-6,24,0,-7,12,0,0,8,0,0,8,0,-1,32,0,-2,33,0,-3,34,0,-4,36,0,0,9,0,0,9,0,32,87,0,33,84,0,0,9,0,-1,14,0,-2,52,0,-3,15,0,0,10,0,0,10,0,-3,90,0,-1,56,0,-2,37,0,0,11,0,0,11,0,0,11,0,-1,45,0,-2,66,0,-1,70,0,-2,71,0,-3,72,0,-4,73,0,-6,48,0,0,13,0,0,13,0,0,13,0,34,79,0,0,13,0,0,14,0,0,14,0,-3,84,0,-1,50,0,-2,51,0,0,15,0,0,15,0,-3,87,0,-1,53,0,-2,54,0,0,16,0,0,16,0,13,16,0,19,40,0,0,16,0,-1,61,0,0,18,0,0,18,0,-1,41,0,-2,42,0,-3,43,0,0,19,0,0,19,0,13,19,0,0,19,0,-1,62,0,0,20,0,0,20,0,13,20,0,0,20,0,-1,63,0,0,21,0,0,21,0,13,21,0,0,21,0,-1,64,0,0,22,0,0,22,0,35,93,0,36,23,0,0,22,0,-1,23,0,0,23,0,0,23,0,-1,44,0,-2,65,0,2,24,0,-2,94,0,-3,95,0,2,24,0,2,24,0,0,25,0,0,25,0,37,88,0,38,89,0,39,90,0,0,25,0,0,26,0,0,26,0,0,26,0,-1,35,0,0,27,0,0,27,0,40,91,0,0,27,0,-1,57,0,0,28,0,0,28,0,41,92,0,0,28,0,-1,38,0,0,32,0,0,32,0,0,32,0,0,33,0,0,33,0,-1,55,0,0,34,0,0,34,0,0,35,0,-2,88,0,0,35,0,0,36,0,0,36,0,0,37,0,-2,89,0,0,37,0,0,38,0,0,38,0,-1,60,0,0,39,0,0,39,0,3,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,45,0,0,45,0,0,45,0,-1,76,0,3,48,0,-1,79,0,0,49,0,0,50,0,-2,82,0,0,51,0,-2,83,0,0,52,0,0,52,0,0,53,0,-2,85,0,0,54,0,-2,86,0,0,55,0,0,55,0,0,56,0,0,56,0,0,57,0,-2,91,0,0,58,0,0,58,0,0,59,0,0,59,0,0,60,0,-2,92,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,-2,93,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,3,69,0,4,96,0,4,96,0,3,70,0,4,97,0,4,97,0,3,71,0,4,98,0,4,98,0,3,72,0,4,99,0,4,99,0,3,73,0,3,74,0,3,75,0,0,76,0,0,76,0,0,77,0,0,78,0,-1,81,0,0,94,0,0,95,0,0,100,0,42,7,1,2,7,6,2,12,8,2,25,10,2,36,11,2,22,16,2,39,19,2,41,20,2,42,21,2,43,26,2,34,277],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,87,90,90,90,90],[43,44,1,1,1,1,1,7,10,11,12,1,7,10,11,12,1,1,15,7,10,11,12,1,7,10,11,12,1,7,10,11,12,1,7,10,11,12,1,1,1,7,10,11,12,1,7,10,11,12,15,-1,8,-1,8,15,9,15,9,9,15,9,15,9,15,15,9,15,9,-1,8,9,15,-1,8,9,9,9,45,46,23,23,7,10,11,12],[38,39,0,0,1,0,0,0,0,2,1,0,0,0,2,1,1,0,40,0,0,2,1,0,0,0,2,1,0,0,0,2,1,0,0,0,2,1,1,1,0,0,0,2,1,0,0,0,2,1,41,14,15,14,15,42,43,44,5,5,45,5,46,5,47,16,48,16,5,49,17,5,50,51,17,52,5,5,53,54,0,0,0,0,2,1]],[[[56,"fanshen2",".mp3",0.424],-1],0,0,[],[],[]],[[[9,"diban",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[55,8]],[[[12,".bin",92439791,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9024,"length":1968,"count":492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9024,"count":188,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.32094284892082214,-0.5274852514266968,0],"maxPosition",8,[1,0.32094284892082214,0.5274852514266968,0.05385317653417587]]],-1],0,0,[],[],[]],[[[9,"Material #25",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":0,"shininessExponent":2},"mainColor",8,[4,4287993237],"specularColor",8,[4,4293256677],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[56,4]],[[[24],[26,"model_caiban",[-2],[1,"1akX4395FUSbSMjECaWR4k",-1,0]],[72,"model_caiban",1,[[21,-3,[0,"d5TWmPC+JWzoteUBfVCRSL"],[0],[10],1]],[1,"deDfeQroBcuqWr7aayJ+8J",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,-1,2,0,0,2,0,14,1,3],[0,0],[-1,8],[57,58]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[59]],[[[9,"yinyin",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[60,8]],[[[9,"pan_1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,4290052063],"mainTexture",6,0],{},{}],11,0,0]]],0,0,[0,0],[6,5],[61,18]],[[[24],[26,"CuttingBoard_02",[-2],[1,"4e5M+n7z1ekJUzqKL7XrJ0",-1,0]],[39,"CuttingBoard_02",1,[[21,-3,[0,"b9Ywi4g1pQWZiAa3fY2CHv"],[0],[10],1]],[1,"9fp/kIPBlbraUrgNq5K3lG",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,14,1,3],[0,0],[-1,8],[62,63]],[[[9,"KitchenPack_TextureAtlas_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":0,"emissiveFactor":1,"metallic":0,"specularFactor":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[64,4]],[[[12,".bin",1676416490,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":2256,"count":564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20257912576198578,-1.3130676101980043e-8,-0.3050483465194702],"maxPosition",8,[1,0.20257911086082458,0.015323330648243427,0.30504804849624634]]],-1],0,0,[],[],[]],[[[9,"Material #48",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":0,"shininessExponent":2},"mainColor",8,[4,4287993237],"specularColor",8,[4,4293256677],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[65,4]],[[[24],[26,"Pan",[-2],[1,"faH7spb+NfKKcFGV9LWCzS",-1,0]],[72,"pingdiguo",1,[[21,-3,[0,"efrzNnL+datoAVMrL40fFE"],[0],[10],1]],[1,"cehE3ST25UNLMu7KCVn392",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,-1,2,0,0,2,0,14,1,3],[0,0],[-1,8],[66,67]],[[[12,".bin",3658892448,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13824,"length":4704,"count":1176,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-15.129997253417969,-24.932296752929688,-0.056069374084472656],"maxPosition",8,[1,15.1300048828125,24.932300567626953,8.696830749511719]]],-1],0,0,[],[],[]],[[[9,"KitchenPack_TextureAtlas_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":0,"emissiveFactor":1,"metallic":0,"specularFactor":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[68,4]],[[[24],[26,"GrillPan_01",[-2],[1,"beECIpx2ZXqKxMUvsbMygL",-1,0]],[39,"GrillPan_01",1,[[21,-3,[0,"840mO3BwFVuY2GI/P5LoWn"],[0],[10],1]],[1,"2f7Uuki9RX1YbBifn6cVmQ",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,14,1,3],[0,0],[-1,8],[69,70]],[[[12,".bin",396101541,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25056,"length":6504,"count":1626,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25056,"count":522,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.19907817244529724,-0.13786208629608154,-0.07597143203020096],"maxPosition",8,[1,0.19985026121139526,0.03324156999588013,0.5609744787216187]]],-1],0,0,[],[],[]],[[[200,[[201,[202,[-18,-19,-20,-21,-22,-23,-24],[[91,-5,-4],[91,-7,-6],[203,-9,-8],[51,false,-11,-10,[[52,[53,"TurnOver"],[92,1]]]],[51,false,-13,-12,[[52,[53,"TurnOver"],[92,1]]]],[51,false,-15,-14,[[52,[53,"TurnOver"],[93]]]],[51,false,-17,-16,[[52,[53,"TurnOver"],[93]]]]],-3,-2,-1]]],[{},"TurnOver",4,[204,3]]],[54,"TurnRight",[55,0]],[54,"TurnLeft",[55,1]],[54,"LeftIdle",[55,2]],[64,"Entry"],[54,"RightIdle",[55,3]],[64,"Exit"],[64,"Any"]],0,[0,47,7,0,48,6,0,49,4,0,17,5,0,18,1,0,17,3,0,18,2,0,17,3,0,18,4,0,17,2,0,18,5,0,17,2,0,18,1,0,17,1,0,18,3,0,17,1,0,18,2,0,-1,4,0,-2,6,0,-3,7,0,-4,1,0,-5,2,0,-6,3,0,-7,5,24],[0,0,0,0],[20,20,20,20],[71,11,72,73]],[[{"name":"default_editbox_bg","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[74]],[[[57,"MyFish"],[68,0,null,[17,"3c3W8fbiRatbctmSWlRS00",-12,[170,"00ffC+E2JJ7oiqrjki60x8",-11,[[172,[2,["3c3W8fbiRatbctmSWlRS00"]],[-10]]],[[16,"fish",["_name"],-1],[5,["_lpos"],-2,[1,0,0,0]],[5,["_lscale"],-3,[1,0.15,0.15,0.15]],[5,["_lrot"],-4,[3,0,0,0,1]],[5,["_euler"],-5,[1,0,0,0]],[19,true,["playOnLoad"],[2,["eaLWDlOelT1KtcRGOt0Oqc"]]],[176,["_materials","0"],-6,1],[177,["_skinningRoot"],-8,-7],[16,1,["_shadowCastingMode"],-9]],[[2,["eaLWDlOelT1KtcRGOt0Oqc"]]]],0]],[111,"MyFish",[-20],[[205,-18,[0,"68dI7J7GtEpJX+Ow1YJ3+A"],-17],[206,-19,[0,"43Rrt6VtZGDYcqktnptTJw"],[1,2,1,1],7]],[150,"527U8eYYhJzKj1EXfjqnEq",-16,0,[[65,["_ac"],-13,1,[2,["5fSThFQt5M0ZVfPVAbRDug"]]],[65,["_skinRenderer"],-14,1,[2,["fdVmS+8uhSi6KZYrdtLuZF"]]],[65,["_shadowAc"],-15,1,[2,["5fSThFQt5M0ZVfPVAbRDug"]]]],[1]],[1,0,1,0]],[2,["3c3W8fbiRatbctmSWlRS00"]],[207,[0,"30Lp5ItGxPTJoIhL5dAaxL"],[3,4],[5,6]],[124,"Fish",2,[1],[4],[1,"e7c6rcUERC+K3osKPPM43l",2,0],[1,-0.188,0,0],[3,0.4999999999999999,0.5,0.5,0.5000000000000001],[1,0,90,90]],[208,1,[0,"5fSThFQt5M0ZVfPVAbRDug"]],[2,["fdVmS+8uhSi6KZYrdtLuZF"]],[209,1,[122,"man_fish",1,[-21],[1,"c7KkC5pSBXCqXXjQk22rQD",2,0]],[0,"fdVmS+8uhSi6KZYrdtLuZF"],[2],[10],1]],0,[0,4,3,0,4,3,0,4,3,0,4,3,0,4,3,0,4,7,0,9,1,0,4,7,0,4,7,0,-1,6,0,50,2,0,3,1,0,21,4,0,21,4,0,21,4,0,3,2,0,51,4,0,0,2,0,0,2,0,-1,5,0,-1,8,0,14,2,1,2,5,4,52,6,4,53,8,4,54,6,4,0,5,21],[0,0,0,0,0,0,0,0,6,8,8],[15,9,-1,-1,-2,-1,-2,55,56,8,24],[75,12,12,12,76,77,78,79,80,19,20]],[[[94,"builtin-camera-texture",[{"hash":3210692180,"name":"builtin-camera-texture|camera-texture-vs:vert|camera-texture-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o *= v_color;\n  #endif\n  #if USE_TEXTURE\n    o *= texture2D(mainTexture, v_uv);\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":113,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":46}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"ALPHA_TEST_CHANNEL","type":"string","options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-camera-texture|camera-texture-vs:vert|camera-texture-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"transparent","passes":[{"program":"builtin-camera-texture|camera-texture-vs:vert|camera-texture-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"add","passes":[{"program":"builtin-camera-texture|camera-texture-vs:vert|camera-texture-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-camera-texture|camera-texture-vs:vert|camera-texture-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1]},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"type":16,"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"value":[1,1,1,0.5]}}}]}]]],0,0,[],[],[]],[[[95,"default-material",[{}],[{}]]],0,0,[0],[5],[18]],[[[9,"FishLeft",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[81,9]],[[[9,"KitchenPack_TextureAtlas_01",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":2,"HAS_EXPORTED_METALLIC":true,"USE_ALBEDO_MAP":true}],[[[{"shininessExponent":0,"emissiveFactor":1,"metallic":0,"specularFactor":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[82,4]],[[[12,".bin",2626030702,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8064,"length":2544,"count":636,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8064,"count":168,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1935700923204422,-7.212372477027884e-9,-0.2701941132545471],"maxPosition",8,[1,0.1935700923204422,0.10529515892267227,0.27019447088241577]]],-1],0,0,[],[],[]],[[[24],[26,"RoasterPan_01",[-2],[1,"aeKuE97idaVLZqlJ0c5qSD",-1,0]],[67,"RoasterPan_01",1,[-4],[[21,-3,[0,"6dfPK+v4tYYKxyHxdVRefu"],[2],[10],3]],[1,"2cQLT+sCtaS4oob+Xi1Z1W",1,0]],[58,"RoasterPan_Grid_01",2,[[21,-5,[0,"4dGjIVYINSj7Rheabuo38f"],[0],[10],1]],[1,"9e0lNS1oJe3LqFhT/ltvG1",1,0],[1,-2.9802322387695312e-8,0.01593834161758423,2.3772189194914972e-7]]],0,[0,3,1,0,-1,2,0,0,2,0,-1,3,0,0,3,0,14,1,5],[0,0,0,0],[-1,8,-1,8],[21,83,21,84]],[[[12,".bin",2308918248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32064,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":32064,"count":668,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1789170503616333,-0.003467750735580921,-0.24906636774539948],"maxPosition",8,[1,0.17084957659244537,0.030308257788419724,0.24906624853610992]]],-1],0,0,[],[],[]],[[[9,"pan",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4287947263],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[85,9]],[[{"name":"default_radio_button_off","rect":{"x":3,"y":3,"width":26,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[13,13,13,13],"vertices":{"rawPosition":[-13,-13,0,13,-13,0,-13,13,0,13,13,0],"indexes":[0,1,2,2,1,3],"uv":[3,29,29,29,3,3,29,3],"nuv":[0.09375,0.09375,0.90625,0.09375,0.09375,0.90625,0.90625,0.90625],"minPos":{"x":-13,"y":-13,"z":0},"maxPos":{"x":13,"y":13,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[5],0,[0],[16],[86]],[[[94,"dcc/imported-specular-glossiness",[{"hash":2269931406,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularGlossinessMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_GLOSSINESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":8,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":11,"defines":["CC_FORWARD_ADD"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform mediump vec4 cc_debug_view_mode;\n  uniform mediump vec4 cc_debug_view_composite_pack_1;\n  uniform mediump vec4 cc_debug_view_composite_pack_2;\n  uniform mediump vec4 cc_debug_view_composite_pack_3;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 diffuseColor;\n     uniform vec4 specularColor;\n     uniform vec4 emissive;\n     uniform float alphaThreshold;\n     uniform float shininessExponent;\n     uniform float glossiness;\n     uniform float metallic;\n     uniform float normalScale;\n     uniform float transparencyFactor;\n     uniform float diffuseFactor;\n     uniform float specularFactor;\n#if CC_USE_FOG != 4\n  float LinearFog(vec4 pos, vec3 cameraPos, float fogStart, float fogEnd) {\n      vec4 wPos = pos;\n      float cam_dis = distance(cameraPos, wPos.xyz);\n      return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * fogDensity);\n      return f;\n  }\n  float ExpSquaredFog(vec4 pos, vec3 cameraPos, float fogStart, float fogDensity, float fogAtten) {\n      vec4 wPos = pos;\n      float cam_dis = max(distance(cameraPos, wPos.xyz) - fogStart, 0.0) / fogAtten * 4.;\n      float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n      return f;\n  }\n  float LayeredFog(vec4 pos, vec3 cameraPos, float fogTop, float fogRange, float fogAtten) {\n      vec4 wPos = pos;\n      vec3 camWorldProj = cameraPos.xyz;\n      camWorldProj.y = 0.;\n      vec3 worldPosProj = wPos.xyz;\n      worldPosProj.y = 0.;\n      float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n      float fDeltaY, fDensityIntegral;\n      if (cameraPos.y > fogTop) {\n          if (wPos.y < fogTop) {\n              fDeltaY = (fogTop - wPos.y) / fogRange * 2.0;\n              fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n          }\n          else {\n              fDeltaY = 0.;\n              fDensityIntegral = 0.;\n          }\n      }\n      else {\n          if (wPos.y < fogTop) {\n              float fDeltaA = (fogTop - cameraPos.y) / fogRange * 2.;\n              float fDeltaB = (fogTop - wPos.y) / fogRange * 2.;\n              fDeltaY = abs(fDeltaA - fDeltaB);\n              fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n          }\n          else {\n              fDeltaY = abs(fogTop - cameraPos.y) / fogRange * 2.;\n              fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n          }\n      }\n      float fDensity;\n      if (fDeltaY != 0.) {\n          fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n      }\n      else {\n          fDensity = 0.;\n      }\n      float f = exp(-fDensity);\n      return f;\n  }\n#endif\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n#if CC_USE_FOG == 0\n\tfactor = LinearFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.y);\n#elif CC_USE_FOG == 1\n\tfactor = ExpFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 2\n\tfactor = ExpSquaredFog(pos, cc_cameraPos.xyz, cc_fogBase.x, cc_fogBase.z, cc_fogAdd.z);\n#elif CC_USE_FOG == 3\n\tfactor = LayeredFog(pos, cc_cameraPos.xyz, cc_fogAdd.x, cc_fogAdd.y, cc_fogAdd.z);\n#else\n\tfactor = 1.0;\n#endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n\tcolor = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL CC_SURFACES_DEBUG_VIEW_VERTEX_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT CC_SURFACES_DEBUG_VIEW_VERTEX_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_WORLD_POS CC_SURFACES_DEBUG_VIEW_VERTEX_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR CC_SURFACES_DEBUG_VIEW_WORLD_POS + 1\n#define CC_SURFACES_DEBUG_VIEW_FACE_SIDE CC_SURFACES_DEBUG_VIEW_VERTEX_MIRROR + 1\n#define CC_SURFACES_DEBUG_VIEW_UV0 CC_SURFACES_DEBUG_VIEW_FACE_SIDE + 1\n#define CC_SURFACES_DEBUG_VIEW_UV1 CC_SURFACES_DEBUG_VIEW_UV0 + 1\n#define CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP CC_SURFACES_DEBUG_VIEW_UV1 + 1\n#define CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH CC_SURFACES_DEBUG_VIEW_UVLIGHTMAP + 1\n#define CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH CC_SURFACES_DEBUG_VIEW_PROJ_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL CC_SURFACES_DEBUG_VIEW_LINEAR_DEPTH + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT CC_SURFACES_DEBUG_VIEW_FRAGMENT_NORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL CC_SURFACES_DEBUG_VIEW_FRAGMENT_TANGENT + 1\n#define CC_SURFACES_DEBUG_VIEW_BASE_COLOR CC_SURFACES_DEBUG_VIEW_FRAGMENT_BINORMAL + 1\n#define CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR CC_SURFACES_DEBUG_VIEW_BASE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR CC_SURFACES_DEBUG_VIEW_DIFFUSE_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_TRANSPARENCY CC_SURFACES_DEBUG_VIEW_SPECULAR_COLOR + 1\n#define CC_SURFACES_DEBUG_VIEW_METALLIC CC_SURFACES_DEBUG_VIEW_TRANSPARENCY + 1\n#define CC_SURFACES_DEBUG_VIEW_ROUGHNESS CC_SURFACES_DEBUG_VIEW_METALLIC + 1\n#define CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY CC_SURFACES_DEBUG_VIEW_ROUGHNESS + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE CC_SURFACES_DEBUG_VIEW_SPECULAR_INTENSITY + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR CC_SURFACES_DEBUG_VIEW_DIRECT_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_DIRECT_ALL CC_SURFACES_DEBUG_VIEW_DIRECT_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE CC_SURFACES_DEBUG_VIEW_DIRECT_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR CC_SURFACES_DEBUG_VIEW_ENV_DIFFUSE + 1\n#define CC_SURFACES_DEBUG_VIEW_ENV_ALL CC_SURFACES_DEBUG_VIEW_ENV_SPECULAR + 1\n#define CC_SURFACES_DEBUG_VIEW_EMISSIVE CC_SURFACES_DEBUG_VIEW_ENV_ALL + 1\n#define CC_SURFACES_DEBUG_VIEW_LIGHT_MAP CC_SURFACES_DEBUG_VIEW_EMISSIVE + 1\n#define CC_SURFACES_DEBUG_VIEW_SHADOW CC_SURFACES_DEBUG_VIEW_LIGHT_MAP + 1\n#define CC_SURFACES_DEBUG_VIEW_AO CC_SURFACES_DEBUG_VIEW_SHADOW + 1\n#define CC_SURFACES_DEBUG_VIEW_FOG CC_SURFACES_DEBUG_VIEW_AO + 1\n#define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#define IS_DEBUG_VIEW_LIGHTING_ENABLE_WITH_ALBEDO (cc_debug_view_mode.y > 0.0)\n#define IS_DEBUG_VIEW_MISC_ENABLE_CSM_LAYER_COLORATION (cc_debug_view_mode.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_DIFFUSE (cc_debug_view_composite_pack_1.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_DIRECT_SPECULAR (cc_debug_view_composite_pack_1.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_DIFFUSE (cc_debug_view_composite_pack_1.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_ENV_SPECULAR (cc_debug_view_composite_pack_1.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_EMISSIVE (cc_debug_view_composite_pack_2.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_LIGHT_MAP (cc_debug_view_composite_pack_2.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_SHADOW (cc_debug_view_composite_pack_2.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_AO (cc_debug_view_composite_pack_2.w > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_NORMAL_MAP (cc_debug_view_composite_pack_3.x > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_FOG (cc_debug_view_composite_pack_3.y > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_TONE_MAPPING (cc_debug_view_composite_pack_3.z > 0.0)\n#define IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION (cc_debug_view_composite_pack_3.w > 0.0)\nvec3 SRGBToLinear (vec3 gamma) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return gamma;\n    }\n  #endif\n#endif\n  return gamma * gamma;\n}\nvec3 LinearToSRGB(vec3 linear) {\n#ifdef CC_USE_SURFACE_SHADER\n  #if CC_USE_DEBUG_VIEW == CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    if (!IS_DEBUG_VIEW_COMPOSITE_ENABLE_GAMMA_CORRECTION) {\n      return linear;\n    }\n  #endif\n#endif\n  return sqrt(linear);\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp mat4 cc_matLightViewProj;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  uniform highp vec4 cc_csmViewDir0[4];\n  uniform highp vec4 cc_csmViewDir1[4];\n  uniform highp vec4 cc_csmViewDir2[4];\n  uniform highp vec4 cc_csmAtlas[4];\n  uniform highp mat4 cc_matCSMViewProj[4];\n  uniform highp vec4 cc_csmProjDepthInfo[4];\n  uniform highp vec4 cc_csmProjInfo[4];\n#endif\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float NativePCFShadowFactorHard (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    #if CC_SHADOWMAP_FORMAT == 1\n      return step(shadowNDCPos.z, dot(texture2D(shadowMap, shadowNDCPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      return step(shadowNDCPos.z, texture2D(shadowMap, shadowNDCPos.xy).x);\n    #endif\n  }\n  float NativePCFShadowFactorSoft (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    vec2 shadowNDCPos_offset = shadowNDCPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos.y)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset.y)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset.x, shadowNDCPos_offset.y)).x);\n    #endif\n    float coefX   = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float NativePCFShadowFactorSoft3X (vec3 shadowNDCPos, sampler2D shadowMap, vec2 shadowMapResolution)\n  {\n    vec2 oneTap = 1.0 / shadowMapResolution;\n    float shadowNDCPos_offset_L = shadowNDCPos.x - oneTap.x;\n    float shadowNDCPos_offset_R = shadowNDCPos.x + oneTap.x;\n    float shadowNDCPos_offset_U = shadowNDCPos.y - oneTap.y;\n    float shadowNDCPos_offset_D = shadowNDCPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    #if CC_SHADOWMAP_FORMAT == 1\n      block0 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(shadowNDCPos.z, dot(texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    #else\n      block0 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_U)).x);\n      block1 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_U)).x);\n      block2 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_U)).x);\n      block3 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos.y)).x);\n      block4 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos.y)).x);\n      block5 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos.y)).x);\n      block6 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_L, shadowNDCPos_offset_D)).x);\n      block7 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos.x, shadowNDCPos_offset_D)).x);\n      block8 = step(shadowNDCPos.z, texture2D(shadowMap, vec2(shadowNDCPos_offset_R, shadowNDCPos_offset_D)).x);\n    #endif\n    float coefX = mod(shadowNDCPos.x, oneTap.x) * shadowMapResolution.x;\n    float coefY = mod(shadowNDCPos.y, oneTap.y) * shadowMapResolution.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  bool GetShadowNDCPos(out vec3 shadowNDCPos, vec4 shadowPosWithDepthBias)\n  {\n  \tshadowNDCPos = shadowPosWithDepthBias.xyz / shadowPosWithDepthBias.w * 0.5 + 0.5;\n  \tif (shadowNDCPos.x < 0.0 || shadowNDCPos.x > 1.0 ||\n  \t\tshadowNDCPos.y < 0.0 || shadowNDCPos.y > 1.0 ||\n  \t\tshadowNDCPos.z < 0.0 || shadowNDCPos.z > 1.0) {\n  \t\treturn false;\n  \t}\n  \tshadowNDCPos.xy = cc_cameraPos.w == 1.0 ? vec2(shadowNDCPos.xy.x, 1.0 - shadowNDCPos.xy.y) : shadowNDCPos.xy;\n  \treturn true;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, vec3 matViewDir0, vec3 matViewDir1, vec3 matViewDir2, vec2 projScaleXY)\n  {\n    vec4 newShadowPos = shadowPos;\n    if (normalBias > EPSILON_LOWP)\n    {\n      vec3 viewNormal = vec3(dot(matViewDir0, worldNormal), dot(matViewDir1, worldNormal), dot(matViewDir2, worldNormal));\n      if (viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias, mat4 matLightView, vec2 projScaleXY)\n  {\n  \tvec4 newShadowPos = shadowPos;\n  \tif (normalBias > EPSILON_LOWP)\n  \t{\n  \t\tvec4 viewNormal = matLightView * vec4(worldNormal, 0.0);\n  \t\tif (viewNormal.z < 0.1)\n  \t\t\tnewShadowPos.xy += viewNormal.xy * projScaleXY * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n  \t}\n  \treturn newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n  \tvec3 viewSpacePos;\n  \tviewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n  \tviewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n  \tviewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n  \tvec4 clipSpacePos;\n  \tclipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n  \tclipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n  \t#if CC_SHADOWMAP_USE_LINEAR_DEPTH\n  \t\tclipSpacePos.z = GetLinearDepthFromViewSpace(viewSpacePos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n  \t\tclipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n  \t#endif\n  \treturn clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias, float projScaleZ, float projBiasZ)\n  {\n  \tfloat coeffA = projScaleZ;\n  \tfloat coeffB = projBiasZ;\n  \tfloat viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n  \tviewSpacePos_z += viewspaceDepthBias;\n  \tvec4 result = shadowPos;\n  \tresult.z = viewSpacePos_z * coeffA + coeffB;\n  \treturn result;\n  }\n  vec4 ApplyShadowDepthBias_PerspectiveLinearDepth(vec4 shadowPos, float viewspaceDepthBias, vec3 worldPos)\n  {\n    shadowPos.z = CCGetLinearDepth(worldPos, viewspaceDepthBias) * 2.0 - 1.0;\n    shadowPos.z *= shadowPos.w;\n    return shadowPos;\n  }\n  float CCGetDirLightShadowFactorHard (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetDirLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_shadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorHard(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCGetSpotLightShadowFactorSoft3X (vec4 shadowPosWithDepthBias, vec3 worldPos) {\n\t  vec3 shadowNDCPos;\n\t  if (!GetShadowNDCPos(shadowNDCPos, shadowPosWithDepthBias)) {\n\t\t  return 1.0;\n\t  }\n    return NativePCFShadowFactorSoft3X(shadowNDCPos, cc_spotShadowMap, cc_shadowWHPBInfo.xy);\n  }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    vec4 pos = vec4(1.0);\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      pos = ApplyShadowDepthBias_PerspectiveLinearDepth(shadowPos, shadowBias.x, worldPos);\n    #else\n      pos = ApplyShadowDepthBias_Perspective(shadowPos, shadowBias.x);\n    #endif\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft3X(pos, worldPos);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(pos, worldPos);\n    }else {\n      return CCGetSpotLightShadowFactorHard(pos, worldPos);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y, cc_matLightView, cc_shadowProjInfo.xy);\n    pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, cc_shadowProjDepthInfo.x, cc_shadowProjDepthInfo.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetDirLightShadowFactorSoft3X(pos);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n    }else {\n      realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      int layer = -1;\n      highp float layerThreshold = cc_csmViewDir0[0].w;\n      for (int i = 0; i < 4; i++) {\n        vec4 shadowPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n        vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n        if (clipPos.x >= (0.0 + layerThreshold) && clipPos.x <= (1.0 - layerThreshold) &&\n            clipPos.y >= (0.0 + layerThreshold) && clipPos.y <= (1.0 - layerThreshold) &&\n            clipPos.z >= 0.0 && clipPos.z <= 1.0 && layer < 0) {\n          csmPos = cc_matCSMViewProj[i] * vec4(worldPos.xyz, 1.0);\n          csmPos.xy = csmPos.xy * cc_csmAtlas[i].xy + cc_csmAtlas[i].zw;\n          shadowProjDepthInfo = cc_csmProjDepthInfo[i];\n          shadowProjInfo = cc_csmProjInfo[i];\n          shadowViewDir0 = cc_csmViewDir0[i].xyz;\n          shadowViewDir1 = cc_csmViewDir1[i].xyz;\n          shadowViewDir2 = cc_csmViewDir2[i].xyz;\n          layer = i;\n        }\n      }\n      return layer;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias)\n    {\n      vec4 csmPos = vec4(1.0);\n      vec4 shadowProjDepthInfo, shadowProjInfo;\n      vec3 shadowViewDir0, shadowViewDir1, shadowViewDir2;\n      int level = CCGetCSMLevel(csmPos, shadowProjDepthInfo, shadowProjInfo, shadowViewDir0, shadowViewDir1, shadowViewDir2, worldPos);\n      if (level < 0) { return 1.0; }\n      float realtimeShadow = 1.0;\n      vec4 pos = ApplyShadowDepthBias_FaceNormal(csmPos, N, shadowBias.y, shadowViewDir0, shadowViewDir1, shadowViewDir2, shadowProjInfo.xy);\n      pos = ApplyShadowDepthBias_Orthographic(pos, shadowBias.x, shadowProjDepthInfo.x, shadowProjDepthInfo.y);\n      float pcf = cc_shadowWHPBInfo.z;\n      if (pcf > 1.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft3X(pos);\n      } else if (pcf > 0.9) {\n        realtimeShadow = CCGetDirLightShadowFactorSoft(pos);\n      }else {\n        realtimeShadow = CCGetDirLightShadowFactorHard(pos);\n      }\n      return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n    }\n  #else\n    int CCGetCSMLevel(out vec4 csmPos, out vec4 shadowProjDepthInfo, out vec4 shadowProjInfo, out vec3 shadowViewDir0, out vec3 shadowViewDir1, out vec3 shadowViewDir2, vec3 worldPos) {\n      return -1;\n    }\n    float CCCSMFactorBase(vec3 worldPos, vec3 N, vec2 shadowBias) {\n      vec4 shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\n      return CCShadowFactorBase(shadowPos, N, shadowBias);\n    }\n  #endif\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * (mipCount - 1.0);\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    vec3 position, position_fract_part;\n    #else\n    vec3 position;\n    #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  float NL = max(dot(N, L), 0.0);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      if (cc_shadowLPNNInfo.w > 0.0) {\n        shadow = CCCSMFactorBase(position, N, s.shadowBias);\n      } else {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    }\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec3 finalColor = diffuse * s.lightmap.rgb * shadow;\n  #else\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE && !CC_IBL_CONVOLUTED\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * (cc_ambientGround.w - 1.0));\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = LinearToSRGB(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n\tfloat d = max(max(diffuse.x, diffuse.y), diffuse.z);\n\tvec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n\tnormalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n\tfloat s = max(max(specular.x, specular.y), specular.z);\n\tfloat delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n\tfloat deltaSqrt = sqrt(max(0.0, delta));\n\tfloat solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n\tvec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n\tbool isValidSolver = delta >= 0.0;\n\tmetallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n\talbedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n\treturn isValidSolver;\n}\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#define DCC_APP_OTHERS 0\n#define DCC_APP_AUTODESK 1\n#define DCC_APP_BLENDER 2\n#define DCC_APP_CINEMA4D 3\n#define DCC_APP_GLTF 4\n#if USE_SHININESS_MAP\n  uniform sampler2D shininessExponentMap;\n#endif\n#if USE_SPECULAR_GLOSSINESS_MAP\n  uniform sampler2D specularGlossinessMap;\n#endif\n#if USE_SPECULAR_MAP\n  uniform sampler2D specularMap;\n#endif\n #if USE_METALLIC_MAP\n  uniform sampler2D metallicMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\nfloat discolor(vec3 srcColor) {\n  return dot(GRAY_VECTOR, srcColor);\n}\nfloat convertShininessExponent(float shininessExp)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    float glossiness = pow(l2, 0.5);\n  #else\n    float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n  #endif\n    return glossiness;\n}\nfloat getSpecularIntensityFromRoughness(float roughness)\n{\n  #if DCC_APP_NAME == DCC_APP_BLENDER\n    float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n    float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n  #elif DCC_APP_NAME == DCC_APP_AUTODESK\n    float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n  #else\n    float specularIntensityMultiplier = 1.0;\n  #endif\n    return specularIntensityMultiplier;\n}\nvec4 getSpecularColorAndFactor()\n{\n  vec3 inSpecular = specularColor.rgb;\n  #if USE_SPECULAR_GLOSSINESS_MAP\n    inSpecular = SRGBToLinear(texture2D(specularGlossinessMap, TEXTURE_UV).rgb);\n  #endif\n  #if USE_SPECULAR_MAP\n      vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n      specularTex.rgb = SRGBToLinear(specularTex.rgb);\n      inSpecular = specularTex.rgb;\n  #endif\n  return vec4(inSpecular, specularFactor);\n}\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = vec4(1.0);\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    texColor.a *= transparencyFactor;\n    baseColor *= texColor;\n  #else\n    baseColor *= diffuseColor;\n  #endif\n  baseColor.rgb *= diffuseFactor;\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < alphaThreshold) discard;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  vec4 specularColorAndFactor = getSpecularColorAndFactor();\n  float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n  #if HAS_EXPORTED_GLOSSINESS\n    #if USE_SPECULAR_GLOSSINESS_MAP\n      inGlossiness = 1.0 - texture2D(specularGlossinessMap, TEXTURE_UV).a;\n    #else\n      inGlossiness = glossiness;\n    #endif\n  #else\n    #if USE_SHININESS_MAP\n      #if USE_SHININESS_MAP_CHANNEL\n        inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).SHININESS_MAP_CHANNEL;\n      #else\n        inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n      #endif\n    #else\n      inGlossiness = convertShininessExponent(shininessExponent);\n    #endif\n    inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n  #endif\n  float inMetallic = 0.0;\n  vec4 albedo = baseColor;\n  #if HAS_EXPORTED_METALLIC\n    inMetallic = metallic;\n    float spec = specularFactor;\n    #if USE_SPECULAR_MAP\n      spec = dot(GRAY_VECTOR, texture2D(specularMap, TEXTURE_UV).rgb);\n    #endif\n    inSpecularIntensity *= spec * 0.5;\n  #else\n    GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n    inSpecularIntensity *= inMetallic;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * normalScale) * normalize(v_tangent) +\n      (nmmp.y * normalScale) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    packHighpData(s.position, s.position_fract_part, v_position);\n    #else\n    s.position = v_position;\n    #endif\n  s.albedo = albedo;\n  s.occlusion = 1.0;\n  s.roughness = 1.0 - inGlossiness;\n  s.metallic = inMetallic;\n  s.specularIntensity = inSpecularIntensity * 0.5;\n  s.emissive = vec3(0.0);\n#if USE_EMISSIVE_MAP\n  s.emissive = texture2D(emissiveMap, TEXTURE_UV).xyz;\n#endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":181,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"CC_USE_FOG","type":"number","range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"USE_NORMAL_MAP","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"CC_FORWARD_ADD","type":"boolean"},{"name":"USE_TWOSIDE","type":"boolean"},{"name":"CC_USE_DEBUG_VIEW","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_USE_IBL","type":"number","range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean"},{"name":"CC_IBL_CONVOLUTED","type":"boolean"},{"name":"CC_USE_HDR","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","range":[0,4]},{"name":"USE_SHININESS_MAP","type":"boolean"},{"name":"SHININESS_MAP_CHANNEL","type":"string","options":["a","r","g","b"]},{"name":"USE_SPECULAR_GLOSSINESS_MAP","type":"boolean"},{"name":"USE_SPECULAR_MAP","type":"boolean"},{"name":"USE_METALLIC_MAP","type":"boolean"},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_EMISSIVE_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean"},{"name":"USE_SHININESS_MAP_CHANNEL","type":"boolean"},{"name":"HAS_EXPORTED_METALLIC","type":"boolean"},{"name":"CC_PIPELINE_TYPE","type":"number","range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean"}]},{"hash":2706003509,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]},{"name":"a_color","format":44,"location":15,"defines":["USE_VERTEX_COLOR"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  v_clip_depth = clipPos.zw;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 diffuseColor;\n   uniform float alphaThreshold;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #endif\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nfloat GetLinearDepthFromViewSpace(vec3 viewPos, float near, float far) {\n  float dist = length(viewPos);\n  return (dist - near) / (far - near);\n}\nfloat CCGetLinearDepth(vec3 worldPos, float viewSpaceBias) {\n\tvec4 viewPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  viewPos.z += viewSpaceBias;\n\treturn GetLinearDepthFromViewSpace(viewPos.xyz, cc_shadowNFLSInfo.x, cc_shadowNFLSInfo.y);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n\treturn CCGetLinearDepth(worldPos, 0.0);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotShadowMap;\n  #if CC_SUPPORT_CASCADED_SHADOW_MAP\n  #else\n  #endif\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying highp vec2 v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  #if USE_ALPHA_TEST\n    float alpha = diffuseColor.a;\n    #if USE_VERTEX_COLOR\n      alpha *= v_color.a;\n    #endif\n    #if USE_ALBEDO_MAP\n      alpha *= texture2D(albedoMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_TRANSPARENCY_MAP\n      alpha = texture2D(transparencyMap, TEXTURE_UV).a;\n    #endif\n    if (alpha < alphaThreshold) discard;\n  #endif\n  highp float clipDepth = v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5;\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    #if CC_SHADOWMAP_USE_LINEAR_DEPTH\n      clipDepth = CCGetLinearDepth(v_worldPos.xyz);\n    #endif\n  }\n  #if CC_SHADOWMAP_FORMAT == 1\n    return packDepthToRGBA(clipDepth);\n  #else\n    return vec4(clipDepth, 1.0, 1.0, 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCCSM","defines":["CC_SUPPORT_CASCADED_SHADOW_MAP"]},{"name":"CCGlobal","defines":["CC_RECEIVE_SHADOW"]},{"name":"CCCamera","defines":["CC_RECEIVE_SHADOW"]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotShadowMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":96,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":113}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"USE_BATCHING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"},{"name":"HAS_SECOND_UV","type":"boolean"},{"name":"USE_VERTEX_COLOR","type":"boolean"},{"name":"CC_SUPPORT_CASCADED_SHADOW_MAP","type":"boolean"},{"name":"TEXTURE_UV","type":"string","options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean"},{"name":"USE_TRANSPARENCY_MAP","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"CC_SHADOWMAP_USE_LINEAR_DEPTH","type":"boolean"},{"name":"CC_SHADOWMAP_FORMAT","type":"number","range":[0,3]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1]},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28},"shininessExponent":{"type":13,"value":[100]},"specularGlossinessMap":{"value":"grey","type":28},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0]},"specularMap":{"value":"grey","type":28},"specularFactor":{"type":13,"value":[1]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0]},"metallic":{"type":13,"value":[0]},"metallicMap":{"value":"grey","type":28},"albedoMap":{"type":28,"value":"grey"},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"normalScale":{"type":13,"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTexture":{"value":"grey","type":28,"handleInfo":["albedoMap",0,28]},"transparencyMap":{"value":"grey","type":28},"transparencyFactor":{"type":13,"value":[1]},"diffuseColor":{"type":16,"value":[1,1,1,1]},"diffuseFactor":{"type":13,"value":[1]},"albedoMap":{"type":28,"value":"grey"}}}]}]]],0,0,[],[],[]],[[[211,"Skin-0",1708095725,["Bip/body_1/body_2/body_3","Bip/body_1/body_2","Bip/body_1","Bip/neck","Bip/neck/head","Bip/neck/head/mouth","Bip/body_1/hand_a_l","Bip/body_1/body_2/hand_b_l","Bip/body_1/hand_a_r","Bip/body_1/body_2/hand_b_r"],[[[7,-2.31274555062555e-8,-4.596510549959021e-8,-1,0,-0.03334757313132286,-0.9994438290596008,4.6710784573633646e-8,0,-0.9994438290596008,0.03334757313132286,2.158176748423557e-8,0,-4.327080726623535,0.016913900151848793,2.4709245849408035e-7,1],[7,-1.979787782602216e-7,-2.468426600898965e-7,-1,0,-0.03334739804267883,-0.9994438290596008,2.533074336952268e-7,0,-0.9994438290596008,0.03334739804267883,1.8963712022923573e-7,0,-1.4454114437103271,0.01691347174346447,4.964613253832795e-7,1],[7,1.364402493209127e-7,-3.3776623808989825e-7,-1,0,-1.6292068494294654e-7,-1,3.377662096681888e-7,0,-1,1.629206423103824e-7,-1.3644030616433156e-7,0,1.9460279941558838,-0.03129662573337555,5.310025699145626e-7,1],[7,2.903560414324602e-7,-1.6292068494294654e-7,-1,0,1.6292068494294654e-7,1,-1.629206423103824e-7,0,1,-1.629206423103824e-7,2.903560698541696e-7,0,-1.9684052467346191,-5.1061490647687224e-14,-3.1341318162958487e-7,1],[7,2.7258721502221306e-7,-1.6292067073209182e-7,-1,0,1.6292068494294654e-7,1,-1.6292062809952768e-7,0,1,-1.629206423103824e-7,2.725872434439225e-7,0,-4.32197904586792,-1.0287732976621555e-7,-4.056010141084698e-7,1],[7,8.614275515128611e-9,-3.5465276937429735e-8,-1,0,-0.6915027499198914,0.7223739624023438,-3.1575982717413353e-8,0,0.7223739624023438,0.6915027499198914,-1.8301605564374768e-8,0,-3.4486448764801025,-3.012695550918579,6.723564069943677e-7,1],[7,-0.43361222743988037,0.9010995626449585,-3.410756903576839e-7,0,-0.9010995626449585,-0.43361222743988037,6.093743110113792e-8,0,-9.298389613832114e-8,3.337663656566292e-7,1,0,-2.704249620437622,-0.5859335064888,-8.454104545307928e-7,1],[7,-0.413998007774353,-4.980147991773265e-7,-0.9102776646614075,0,-0.2615656852722168,-0.9578264951705933,0.11896168440580368,0,-0.8718880414962769,0.28734737634658813,0.3965381383895874,0,-3.2361865043640137,-1.4275416135787964,1.3647332191467285,1],[7,0.43361136317253113,0.9011000394821167,5.970567258373194e-7,0,-0.9011000394821167,0.43361136317253113,4.143442993154167e-7,0,1.144750783055315e-7,-7.176722078838793e-7,1,0,-2.704418659210205,0.5855814814567566,2.850122484687745e-7,1],[7,0.41399815678596497,5.3203681460445296e-8,0.9102777242660522,0,-0.26156625151634216,0.9578263163566589,0.1189613789319992,0,-0.8718879818916321,-0.2873477339744568,0.3965383470058441,0,-3.2359845638275146,1.4275404214859009,1.3651793003082275,1]],8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[[12,".bin",506604038,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":25848,"length":5400,"count":1350,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25848,"count":359,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,4,5,6,7,8,9]]},"minPosition",8,[1,-1.9251008033752441,-4.976944923400879,-6.546205997467041],"maxPosition",8,[1,1.925100326538086,4.976944446563721,6.546205997467041]]],-1],0,0,[],[],[]],[[[9,"Material #11",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_ALBEDO_MAP":true,"DCC_APP_NAME":1}],[[[{"transparencyFactor":0,"albedoScale":1,"specularFactor":0,"shininessExponent":2},"mainColor",8,[4,4287993237],"specularColor",8,[4,4293256677],"emissiveColor",8,[4,4278190080],"mainTexture",6,0]],11]]],0,0,[0,0],[6,5],[87,4]],[[[24],[112,"fish",[-3,-4],[[212,-2,[0,"eaLWDlOelT1KtcRGOt0Oqc"],[3],4]],[1,"3c3W8fbiRatbctmSWlRS00",-1,0]],[123,"body_1",[[-5,[33,"hand_a_l",-6,[1,"1bdq62SeNaL72qKup+QGxx",1,0],[1,1.9460268020629883,2.6595699787139893,0.6446102857589722],[3,-0.37629350589916444,-0.598667495563045,0.3762940721432833,0.5986678531909095],[1,0.00005402222370414778,-89.99999972883114,64.30299785940538]],[33,"hand_a_r",-7,[1,"37LoO3+iVbRbAb7DrKBGWY",1,0],[1,1.9460270404815674,2.65956974029541,-0.6450000405311584],[3,-0.598667550896691,-0.3762940098540925,0.5986676701059783,0.37629377143551784],[1,179.99995042483394,90.00004256956737,64.30301731125964]]],1,4,4],[1,"c923ucVgNYipyMrucd31Ga",1,0],[1,0.5832167863845825,-0.20653152465820312,0],[3,1.7021841970882263e-14,8.742277657347387e-8,0.9999999999999774,1.947071837093928e-7],[1,-179.99998998208773,180,0.000022311799734853394]],[125,"body_2",2,[[113,"body_3",-8,[1,"bd2jmdCQBcP70S3o9+7gWQ",1,0],[1,2.881669521331787,3.427267074584961e-7,-4.76837158203125e-7]],[33,"hand_b_r",-9,[1,"32ekyiHRFSNIqD43p2NqNn",1,0],[1,1.5847467184066772,2.29329514503479,-0.0969998836517334],[3,0.9691850871823797,0.12577391814081265,-0.21004330532730842,0.027257993065712697],[1,173.76277186746634,25.19161897291061,13.435211981752905]],[33,"hand_b_l",-10,[1,"dbeS+s7gRZV5uMs02pa63q",1,0],[1,1.5847469568252563,2.29329514503479,0.0974888801574707],[3,0.027308202851507132,-0.21003649799294719,0.12578441005285143,0.9691837873982085],[1,6.243149926919204,-25.191579250331742,13.435170131089377]]],[1,"38fp9s4CBVmod3w8Q53MbV",1,0],[1,3.3911995887756348,8.046627044677734e-7,-3.5762786865234375e-7],[3,-4.297638165183012e-8,-4.4434248371026496e-8,0.01667608696627414,0.9998609443935139],[1,-0.000004841827579789321,-0.000005011743968292523,1.9110273844333172]],[114,"Bip",1,[2,-11],[1,"9aVqJpDmhVbodT8INyeAwv",1,0],[1,-3.934105041736302e-9,1.6314010620117188,1.399999976158142],[3,0.5000001192092807,0.49999988079070157,0.5000000596046359,-0.49999994039534634],[1,-90.00002049056752,-89.99999316981084,-1.2213329976819904e-12]],[39,"man_fish",1,[[210,-12,[0,"fdVmS+8uhSi6KZYrdtLuZF"],[0],[10],1,1,2]],[1,"c7KkC5pSBXCqXXjQk22rQD",1,0]],[115,"neck",4,[-13],[1,"33yxTg1GhXN514y/41A3gd",1,0],[1,0.6055941581726074,-0.17523491382598877,0]],[126,"head",6,[[33,"mouth",-14,[1,"94BWJRgyBdbrEVqhasjIL2",1,0],[1,0.2525181770324707,-0.20845532417297363,2.384185791015625e-7],[3,-5.685558071724504e-8,-2.340896154724511e-7,-0.3725763619466437,0.9280015379936315],[1,-0.00002220503616951147,-0.000037820805402580105,-43.74919240167555]]],[1,"a3j8dD+XBfBaidqTpq3/WI",1,0],[1,2.353573799133301,-1.043081283569336e-7,-3.5762786865234375e-7]]],0,[0,3,1,0,0,1,0,-1,5,0,-2,4,0,-1,3,0,2,2,0,2,2,0,2,3,0,2,3,0,2,3,0,-2,6,0,0,5,0,-1,7,0,2,7,0,14,1,2,2,4,14],[0,0,0,0,0],[-1,8,24,-1,57],[88,19,20,11,11]]]]
